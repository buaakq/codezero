start main_menu

#############
#  SYMBOLS  #
#############
symbols

ARCH_ARM		'ARM'					text
ARM architecture.

Support for armv5, armv6 available.
.

arm_cpu_type		'ARM Processor Type'			text
Select the type of arm cpu/processor to be used.
.

CPU_ARM1136		'ARM1136 - Experimental'		text
ARMv6/ARM11 series based uniprocessor cpu.
.

CPU_ARM11MPCORE		'ARM11 MPCore - Experimental'		text
ARMv6/ARM11 series based multiprocessor cpu.
.

CPU_ARM926		'ARM926EJ-S'				text
ARMv5/ARM9 series based uniprocessor cpu.
.

arm_platform_type	'ARM Platform Type'			text
Select the type of arm platform to be used.
.

PLATFORM_PB926		'PB926-Versatile Platform'		text
ARMv5 based versatile-pb platform.
.

PLATFORM_EB		'Realview EB Platform'			text
ARMv6 based realview-eb platform.
Supported cpus:
	ARM1136
	ARM11MPCORE
.

main_menu		'Codezero Microkernel Configurator'

arm_menu		'ARM Architecture Configuration'	text
Configure arm architecture.
.

processor_properties	'Generic Processor Properties'		text
Generic processor properties common to all types of processors supported.
.

kernel_generic_options	'Generic Kernel Properties'		text
Generic kernel properties.
.

toolchain_menu		'Toolchain Prefix'			text
Toolchains used for compiling kernel and user space.
.

containers_menu		'Container Setup'			text
Select the number of containers and configure each container.
.

arch_type		'Main architecture'			text
Select the type of architecture.
.

SMP_			'Enable SMP Support'			text
Enable/Disable smp support.
.

NCPU			'Number of SMP CPUs'			text
Configure the number of cpus in case of multiprocessor cores.

Available only when smp is enabled.
.

DEBUG_ACCOUNTING	'Enable system operations accounting'	text
Enable/Disable sytem operations accounting.

By default operation accounting in kernel is enabled.
To enable operation accounting in userspace enable DEBUG_PERFMON_USER.
.

DEBUG_PERFMON		'Enable performance monitoring'		text
Enable/Disable system performance monitoring.
.

DEBUG_PERFMON_USER	'Userspace access to perfmon registers'	text
Enable/Disable userspace access to processor's performance registers.
Enabling this option will automatically disable in-kernel measurements.
.

DEBUG_SPINLOCKS		'Debug spinlocks'			text
Enable/Disable spinlock debugging by the kernel.
Eg: detect recursive locks, double unlocks etc.
.

SCHED_TICKS		'Scheduler ticks per second'		text
Configure the number of ticks generated per second
by the timer source of scheduler.
.

ICACHE_DISABLE		'Disable the L1 instruction cache'	text
Enable/Disable usage of L1 instruction cache by the processor.
.

DCACHE_DISABLE		'Disable the L1 data cache'		text
Enable/Disable usage of L1 data cache by the processor.
.

PREEMPT_DISABLE		'Disable Kernel Preemption'		text
Enable/Disable premption of kernel.
.

TOOLCHAIN_USERSPACE	'Toolchain prefix for userspace'	text
Toolchain used for compiling userspace libraries and container.

Userspace is tested for an up-to-date codesourcery NONE-EABI-LINUX toolchain.

To specify custom toolchain, use:
	path/to/toolchain/toolchain-prefix
.

TOOLCHAIN_KERNEL     	'Toolchain prefix for kernel'		text
Toolchain used for compiling kernel and loader.

Kernel is tested for an up-to-date codesourcery EABI toolchain.
To specify custom toolchain, use:
	path/to/toolchain/toolchain-prefix
.

CAPABILITIES		'Enable capability checking'		text
Enable/Disable capability checking by kernel.
.

#############
#  CHOICES  #
#############

choices arch_type
	ARCH_ARM
	default ARCH_ARM

choices arm_platform_type
        PLATFORM_PB926
	PLATFORM_EB
        default PLATFORM_PB926

choices arm_cpu_type
	CPU_ARM926
	CPU_ARM1136
	CPU_ARM11MPCORE
        default CPU_ARM926

#############
#   MENUS   #
#############

menu arm_menu
	arm_platform_type
	arm_cpu_type

menu processor_properties
	SMP_
	NCPU%
	ICACHE_DISABLE
	DCACHE_DISABLE

menu kernel_generic_options
	PREEMPT_DISABLE
	DEBUG_ACCOUNTING
	DEBUG_PERFMON
	DEBUG_PERFMON_USER
	DEBUG_SPINLOCKS
	SCHED_TICKS%

menu toolchain_menu
	TOOLCHAIN_USERSPACE$
	TOOLCHAIN_KERNEL$

menu main_menu
	arch_type
	arm_menu
	processor_properties
	kernel_generic_options
	toolchain_menu
	containers_menu

#############
#   RULES   #
#############
#Capability/Container rules:
default CAPABILITIES from y
default DEBUG_ACCOUNTING from n
default DEBUG_PERFMON from n
default DEBUG_PERFMON_USER from n
default DEBUG_SPINLOCKS from n
default SCHED_TICKS from 1000
derive DEBUG_PERFMON_KERNEL from DEBUG_PERFMON == y and DEBUG_PERFMON_USER != y

#Subarch Derivation Rules
derive SUBARCH_V5 from CPU_ARM926

derive SUBARCH_V6 from CPU_ARM1136 or
		       CPU_ARM11MPCORE

#CPU rules:
unless PLATFORM_PB926                          suppress        CPU_ARM926
unless PLATFORM_EB			       suppress        CPU_ARM11MPCORE
unless PLATFORM_EB                             suppress        CPU_ARM1136

#SMP support rules
unless CPU_ARM11MPCORE suppress SMP_
unless CPU_ARM11MPCORE suppress NCPU
unless SMP_ suppress NCPU
unless DEBUG_ACCOUNTING suppress DEBUG_PERFMON
				 DEBUG_PERFMON_USER
unless DEBUG_PERFMON suppress DEBUG_PERFMON_USER

# NOTE: Unlike menus, choices dont take { sym } model of visibility
# dependencies. Instead, a choice symbol is declared in a menu, and
# suppress statement is used to make sym visible, instead of a
# { sym } model under the choices. (See manual for { sym } usage).

unless ARCH_ARM suppress arm_menu

#SMP default value
default SMP_ from y
default NCPU from 4
default ICACHE_DISABLE from n
default DCACHE_DISABLE from n
default PREEMPT_DISABLE from n

require NCPU <= 4

# Derive Ram base address depending on platform selected
# we use this in setting containers physical regions
# default values
derive RAM_BASE_PLAT from 0

# Toolchains:
default TOOLCHAIN_USERSPACE from 'arm-none-linux-gnueabi-'
default TOOLCHAIN_KERNEL from 'arm-none-eabi-'

prefix CONFIG_

# Checklist for correct CML2
# 1) Have you defined a prompt for each menu, choice_type?
# 2) Have you defined a default for each symbol?
# 3) Have you put 'symbols' keyword before each symbol, menu and choice?


# Important note on derived symbols
# DO NOT place any declaration for derived symbols like normal symbols,
# otherwise the derivation will be silently ignored, and you will be left
# wondering why.

unless CONTAINERS > 1 suppress cont1_menu

unless CONTAINERS > 2 suppress cont2_menu

unless CONTAINERS > 3 suppress cont3_menu

menu containers_menu
	CAPABILITIES
    CONTAINERS%
	cont0_menu
	cont1_menu
	cont2_menu
	cont3_menu

default CONTAINERS from 1
symbols

CONT0_TYPE_LINUX		'Linux Container'	text
Virtualized linux container.
.

CONT0_TYPE_BAREMETAL	'Baremetal Container'	text
Baremetal containers.
These containers contain various demos describing the usage of various system calls, accessing devices etc.
.

CONT0_TYPE_POSIX		'POSIX Container'	text
Posix container displaying a real posix system running over the hypervisor.
.

CONT0_OPT_NAME		'Project Name'		text
Project name for container0 in this build.
.

CONTAINERS              'Number of containers'		text
Number of containers to be configured.

The maximum number of containers that can be configured is set to 4.
.


CONT0_PAGER_PHYSMEM_REGIONS	'Container 0 Number of Physical Regions'		text
Number of physical memory regions alloted to container0.

A maximum of 4 physical memory regions can be alloted to each container.
.

CONT0_PAGER_PHYS0_START		'Container 0 Pager Physical Region 0 Start Address'	text
Start address of physical memory region 0 for container0.
.

CONT0_PAGER_PHYS0_END		'Container 0 Pager Physical Region 0 End Address'	text
End address of physical memory region 0 for container0.
.

CONT0_PAGER_PHYS1_START		'Container 0 Pager Physical Region 1 Start Address'	text
Start address of physical memory region 1 for container0.
.

CONT0_PAGER_PHYS1_END		'Container 0 Pager Physical Region 1 End Address'	text
End address of physical memory region 1 for container0.
.

CONT0_PAGER_PHYS2_START		'Container 0 Pager Physical Region 2 Start Address'	text
Start address of physical memory region 2 for container0.
.

CONT0_PAGER_PHYS2_END		'Container 0 Pager Physical Region 2 End Address'	text
End address of physical memory region 2 for container0.
.

CONT0_PAGER_PHYS3_START		'Container 0 Pager Physical Region 3 Start Address'	text
Start address of physical memory region 3 for container0.
.

CONT0_PAGER_PHYS3_END		'Container 0 Pager Physical Region 3 End Address'	text
End address of physical memory region 3 for container0.
.

symbols
CONT0_PAGER_VIRTMEM_REGIONS	'Container 0 Number of Virtual Regions'		text
Number of virtual memory regions alloted to container0.

A maximum of 6 virtual memory regions can be alloted to each container.
.

CONT0_PAGER_VIRT0_START	'Container 0 Pager Virtual Region 0 Start Address'		text
Start address of virtual memory region 0 for container0.
.

CONT0_PAGER_VIRT0_END	'Container 0 Pager Virtual Region 0 End Address'			text
End address of virtual memory region 0 for container0.
.

CONT0_PAGER_VIRT1_START	'Container 0 Pager Virtual Region 1 Start Address'		text
Start address of virtual memory region 1 for container0.
.

CONT0_PAGER_VIRT1_END	'Container 0 Pager Virtual Region 1 End Address'			text
End address of virtual memory region 1 for container0.
.

CONT0_PAGER_VIRT2_START	'Container 0 Pager Virtual Region 2 Start Address'		text
Start address of virtual memory region 2 for container0.
.

CONT0_PAGER_VIRT2_END	'Container 0 Pager Virtual Region 2 End Address'			text
End address of virtual memory region 2 for container0.
.

CONT0_PAGER_VIRT3_START	'Container 0 Pager Virtual Region 3 Start Address'		text
Start address of virtual memory region 3 for container0.
.

CONT0_PAGER_VIRT3_END	'Container 0 Pager Virtual Region 3 End Address'			text
End address of virtual memory region 3 for container0.
.

CONT0_PAGER_VIRT4_START	'Container 0 Pager Virtual Region 4 Start Address'		text
Start address of virtual memory region 4 for container0.
.

CONT0_PAGER_VIRT4_END	'Container 0 Pager Virtual Region 4 End Address'			text
End address of virtual memory region 4 for container0.
.

CONT0_PAGER_VIRT5_START	'Container 0 Pager Virtual Region 5 Start Address'		text
Start address of virtual memory region 5 for container0.
.

CONT0_PAGER_VIRT5_END	'Container 0 Pager Virtual Region 5 End Address'			text
End address of virtual memory region 5 for container0.
.

# FIXME: We dont need to pass PAGER_LMA and PAGER_VMA to config.h now
# as we are using them just to derive other symbols, in this file only
CONT0_PAGER_LMA		'Container 0 Pager LMA'				text
Physical memory address for loading the pager of container0.
.

CONT0_PAGER_VMA		'Container 0 Pager VMA'				text
Virtual memory address for loading the pager of container0.
.

CONT0_PAGER_SHM_START	'Container 0 Shared Mappings Region Start'		text
Start of virtual memory region to be used for shared mappings for container0.
.

CONT0_PAGER_SHM_END	'Container 0 Shared Mappings Region End'		text
End of virtual memory region to be used for shared mappings for container0.
.

CONT0_PAGER_TASK_START	'Container 0 Task Address Space Region Start'	text
Start of virtual memory region to be used for address spaces generation
for the new tasks created in container0.
.

CONT0_PAGER_TASK_END	'Container 0 Task Address Space Region End'	text
End of virtual memory region to be used for address spaces generation
for the new tasks created in container0.
.

CONT0_PAGER_UTCB_START	'Container 0 UTCB Mappings Region Start'		text
Start of virtual memory region to be used for allocating utcbs of threads in container0.
.

CONT0_PAGER_UTCB_END	'Container 0 UTCB Mappings Region End'		text
End of virtual memory region to be used for allocating utcbs of threads in container0.
.

CONT0_LINUX_ZRELADDR       'Container 0 Linux ZRELADDR Parameter'		text
ZRELADDR parameter of linux kernel.

This refers to the physical memory address where uncompressed linux kernel will be loaded.
This should be within the physical memory regions assigned to linux container.
.

CONT0_LINUX_PAGE_OFFSET	'Container 0 Linux PAGE_OFFSET Parameter'		text
PAGE_OFFSET parameter of linux kernel.

This refers to the virtual memory address from where the virtual memory region
of linux kernel starts.
This should be within the virtual memory regions assigned to linux container.
.

CONT0_LINUX_PHYS_OFFSET	'Container 0 Linux PHYS_OFFSET Parameter'		text
PHYS_OFFSET parameter of linux kernel.

This refers to the beginning address of physical memory region avaialable to linux container/kernel.
.

CONT0_LINUX_ROOTFS_ADDRESS	'Container 0 Linux ROOTFS Address'			text
Virtual memory address where root filesystem, to be used by linux kernel, will be located.

This should be within the range of virtual memory regions assigned to linux container/kernel.
.

default CONT0_PAGER_LMA	 	from CONT0_PAGER_PHYS0_START
default CONT0_PAGER_VMA	 	from CONT0_PAGER_VIRT0_START
default CONT0_PAGER_SHM_START	from CONT0_PAGER_VIRT1_START
default CONT0_PAGER_SHM_END	from CONT0_PAGER_VIRT1_END
default CONT0_PAGER_TASK_START	from CONT0_PAGER_VIRT2_START
default CONT0_PAGER_TASK_END	from CONT0_PAGER_VIRT2_END
default CONT0_PAGER_UTCB_START	from CONT0_PAGER_VIRT3_START
default CONT0_PAGER_UTCB_END	from CONT0_PAGER_VIRT3_END
default CONT0_LINUX_ZRELADDR	from (CONT0_LINUX_PHYS_OFFSET + 0x8000)
default CONT0_LINUX_PAGE_OFFSET 	from CONT0_PAGER_VIRT0_START
default CONT0_LINUX_PHYS_OFFSET 	from CONT0_PAGER_PHYS0_START
default CONT0_LINUX_ROOTFS_ADDRESS	from (CONT0_LINUX_PHYS_OFFSET + 0x500000)

default CONT0_PAGER_VIRTMEM_REGIONS from (CONT0_TYPE_POSIX==y ? 4 : 1)
default CONT0_PAGER_PHYSMEM_REGIONS from 1

# Define limits on virtual and physical memory regions of a _single_ container 0. Too much code!
when CONT0_PAGER_VIRTMEM_REGIONS < 2 suppress CONT0_PAGER_VIRT1_START CONT0_PAGER_VIRT1_END
when CONT0_PAGER_VIRTMEM_REGIONS < 2 suppress CONT0_PAGER_VIRT2_START CONT0_PAGER_VIRT2_END
when CONT0_PAGER_VIRTMEM_REGIONS < 2 suppress CONT0_PAGER_VIRT3_START CONT0_PAGER_VIRT3_END
when CONT0_PAGER_VIRTMEM_REGIONS < 2 suppress CONT0_PAGER_VIRT4_START CONT0_PAGER_VIRT4_END
when CONT0_PAGER_VIRTMEM_REGIONS < 2 suppress CONT0_PAGER_VIRT5_START CONT0_PAGER_VIRT5_END

when CONT0_PAGER_VIRTMEM_REGIONS < 3 suppress CONT0_PAGER_VIRT2_START CONT0_PAGER_VIRT2_END
when CONT0_PAGER_VIRTMEM_REGIONS < 3 suppress CONT0_PAGER_VIRT3_START CONT0_PAGER_VIRT3_END
when CONT0_PAGER_VIRTMEM_REGIONS < 3 suppress CONT0_PAGER_VIRT4_START CONT0_PAGER_VIRT4_END
when CONT0_PAGER_VIRTMEM_REGIONS < 3 suppress CONT0_PAGER_VIRT5_START CONT0_PAGER_VIRT5_END

when CONT0_PAGER_VIRTMEM_REGIONS < 4 suppress CONT0_PAGER_VIRT3_START CONT0_PAGER_VIRT3_END
when CONT0_PAGER_VIRTMEM_REGIONS < 4 suppress CONT0_PAGER_VIRT4_START CONT0_PAGER_VIRT4_END
when CONT0_PAGER_VIRTMEM_REGIONS < 4 suppress CONT0_PAGER_VIRT5_START CONT0_PAGER_VIRT5_END

when CONT0_PAGER_VIRTMEM_REGIONS < 5 suppress CONT0_PAGER_VIRT4_START CONT0_PAGER_VIRT4_END
when CONT0_PAGER_VIRTMEM_REGIONS < 5 suppress CONT0_PAGER_VIRT5_START CONT0_PAGER_VIRT5_END

when CONT0_PAGER_VIRTMEM_REGIONS < 6 suppress CONT0_PAGER_VIRT5_START CONT0_PAGER_VIRT5_END


when CONT0_PAGER_PHYSMEM_REGIONS < 2 suppress CONT0_PAGER_PHYS1_START CONT0_PAGER_PHYS1_END
when CONT0_PAGER_PHYSMEM_REGIONS < 2 suppress CONT0_PAGER_PHYS2_START CONT0_PAGER_PHYS2_END
when CONT0_PAGER_PHYSMEM_REGIONS < 2 suppress CONT0_PAGER_PHYS3_START CONT0_PAGER_PHYS3_END

when CONT0_PAGER_PHYSMEM_REGIONS < 3 suppress CONT0_PAGER_PHYS2_START CONT0_PAGER_PHYS2_END
when CONT0_PAGER_PHYSMEM_REGIONS < 3 suppress CONT0_PAGER_PHYS3_START CONT0_PAGER_PHYS3_END

when CONT0_PAGER_PHYSMEM_REGIONS < 4 suppress CONT0_PAGER_PHYS3_START CONT0_PAGER_PHYS3_END

# We assume kernel uses 0x0 - 0x40000 physical RAM.
# Physical Regions for containers should start after kernel.
require CONT0_PAGER_PHYS0_START >= 0x40000
require CONT0_PAGER_PHYS1_START >= 0x40000
require CONT0_PAGER_PHYS2_START >= 0x40000
require CONT0_PAGER_PHYS3_START >= 0x40000

# TODO: We can add check for end address of physical region to be
# less than RAM SIZE, need to find out RAM SIZE?

# Rules for Linux kernel parameters
require CONT0_LINUX_ZRELADDR > CONT0_LINUX_PHYS_OFFSET + 0x8000

# TODO: Do we want to check if PAGER_LMA/VMA lies in allocated memory regions
default CONT0_PAGER_PHYS0_START from ((0 == 0 ? 0x100000 : (0x100000 + 0 * 0x1000000)) + RAM_BASE_PLAT)
default	CONT0_PAGER_PHYS0_END	from (CONT0_PAGER_PHYS0_START + 0xD00000)
default CONT0_PAGER_PHYS1_START	from CONT0_PAGER_PHYS0_END
default CONT0_PAGER_PHYS1_END	from (CONT0_PAGER_PHYS1_START + 0x100000)
default CONT0_PAGER_PHYS2_START	from CONT0_PAGER_PHYS1_END
default CONT0_PAGER_PHYS2_END	from (CONT0_PAGER_PHYS2_START + 0x100000)
default CONT0_PAGER_PHYS3_START	from CONT0_PAGER_PHYS2_END
default CONT0_PAGER_PHYS3_END	from (CONT0_PAGER_PHYS3_START + 0x100000)

default CONT0_PAGER_VIRT0_START	from (0 == 0 ? 0xa0000000 : (0xa0000000 + 0 * 0x10000000))
default CONT0_PAGER_VIRT0_END	from (CONT0_PAGER_VIRT0_START + 0x10000000)
default CONT0_PAGER_VIRT1_START	from (0 == 0 ? 0x80000000 : (0x80000000 + 0 * 0x8000000))
default CONT0_PAGER_VIRT1_END	from (CONT0_PAGER_VIRT1_START + 0x8000000)
default CONT0_PAGER_VIRT2_START	from (0 == 0 ? 0x40000000 : (0x40000000 + 0 * 0x10000000))
default CONT0_PAGER_VIRT2_END	from (CONT0_PAGER_VIRT2_START + 0x10000000)
default CONT0_PAGER_VIRT3_START	from (0 == 0 ? 0xf8100000 : (0xf8100000 + 0 * 0x100000))
default CONT0_PAGER_VIRT3_END	from (CONT0_PAGER_VIRT3_START + 0x100000)
default CONT0_PAGER_VIRT4_START	from (0 == 0 ? 0x10000000 : (0x10000000 + 0 * 0x10000000))
default CONT0_PAGER_VIRT4_END	from (CONT0_PAGER_VIRT4_START + 0x10000000)
default CONT0_PAGER_VIRT5_START	from 0xe0000000
default CONT0_PAGER_VIRT5_END	from 0xf0000000

default CONT0_OPT_NAME from
(CONT0_TYPE_LINUX==y) ? "linux0" :
((CONT0_TYPE_POSIX==y) ? "posix0" :
((CONT0_BAREMETAL_PROJ_HELLO_WORLD==y) ? "hello_world0" :
((CONT0_BAREMETAL_PROJ_THREADS_DEMO==y) ? "thread_demo0" :
((CONT0_BAREMETAL_PROJ_TEST_SUITE==y) ? "test_suite0" :
((CONT0_BAREMETAL_PROJ_UART_SERVICE==y) ? "uart_service0" :
((CONT0_BAREMETAL_PROJ_KMI_SERVICE==y) ? "kmi_service0" :
((CONT0_BAREMETAL_PROJ_MUTEX_DEMO==y) ? "mutex_demo0" :
((CONT0_BAREMETAL_PROJ_IPC_DEMO==y) ? "ipc_demo0" :
((CONT0_BAREMETAL_PROJ_TIMER_SERVICE==y) ? "timer_service0" : "empty0")))))))))

when CONT0_TYPE_LINUX==y suppress cont0_pager_linker_params
unless CONT0_TYPE_POSIX==y suppress cont0_posix_pager_params
unless CONT0_TYPE_LINUX==y suppress cont0_linux_pager_params
unless CONT0_TYPE_BAREMETAL==y suppress cont0_baremetal_params

# derive symbols, for cinfo.c, depending on the type of container selected
derive CONT0_PAGER_LOAD_ADDR from (CONT0_TYPE_LINUX==y) ? CONT0_LINUX_PHYS_OFFSET : CONT0_PAGER_LMA
derive CONT0_PAGER_VIRT_ADDR from (CONT0_TYPE_LINUX==y) ? CONT0_LINUX_PAGE_OFFSET : CONT0_PAGER_VMA
derive CONT0_START_PC_ADDR from (CONT0_TYPE_LINUX != y) ? CONT0_PAGER_VMA : (CONT0_LINUX_PAGE_OFFSET + CONT0_LINUX_ZRELADDR - CONT0_LINUX_PHYS_OFFSET)

symbols
cont0_menu		'Container 0 Parameters'					text
List of parameters associated with container0.

All parameters are provided with default values, appropriate for defualt configurations of
various containers.
.

cont0_physmem_list	'Container 0 Pager Physical Memory Regions (Capabilities)'	text
List of physical memory regions to be used by container0.
.

cont0_virtmem_list	'Container 0 Pager Virtual Memory Regions (Capabilities)'	text
List of virtual memory regions to be used by container0.
.

container0_type	'Container 0 Type'						text
Container type.
.

#cont0_pager_params	'Container 0 Pager Parameters'			text
#Configuration parameters associated with container0 pager.
#.

container0_options	'Container 0 Options'					text
Configuration parameters associated with container0.
.

cont0_linux_pager_params	'Container 0 Linux Pager Parameters'		text
Configuration parameters associated with pager of container0.
.

cont0_pager_linker_params	'Container 0 Pager Linker Parameters'		text
Pager's linker parameters. These allow shifting the pager image in physical and virtual
address spaces.

For correct functioning, the LMA parameter should match with one of the
defined physical memory capabilities.

The VMA parameter should match with one of the defined virtual memory
capabilities.
.

cont0_posix_pager_params	'Container 0 POSIX Pager Parameters'		text
Configuration parameters associated with pager of container0.
.

cont0_baremetal_params		'Baremetal Project Type'			text
Select the type of sources to include in this baremetal container
.

CONT0_BAREMETAL_PROJ_EMPTY		'Empty Project'					text
Empty container.

This includes the bare minimum sources required to build a container.
.

CONT0_BAREMETAL_PROJ_HELLO_WORLD	'Hello World'					text
Hello world container

This includes a main.c with a hello world message printed on the console.
.

CONT0_BAREMETAL_PROJ_THREADS_DEMO	'Thread Library Demo'				text
Baremetal container demonstrating usage of libl4 thread library and associated API.
.

CONT0_BAREMETAL_PROJ_TEST_SUITE   	'Microkernel Tests'				text
Baremetal container demonstrating some API usage cases and tests.
.

CONT0_BAREMETAL_PROJ_UART_SERVICE	'UART Service'					text
Baremetal container demonstrating usage of uart devices.
.

CONT0_BAREMETAL_PROJ_TIMER_SERVICE 'Timer Service'					text
Baremetal container displaying usage of timer devices.
.

CONT0_BAREMETAL_PROJ_KMI_SERVICE 	'Keyboard Mouse Service'			text
Baremetal container displaying usage of mouse and keyboard devices.
.

CONT0_BAREMETAL_PROJ_MUTEX_DEMO	'Mutex Demo'					text
Baremetal container displaying usage of mutexes.
.

CONT0_BAREMETAL_PROJ_IPC_DEMO	'IPC Demo'					text
Baremetal container displaying usage of ipc calls.
.


choices cont0_baremetal_params
	CONT0_BAREMETAL_PROJ_EMPTY
	CONT0_BAREMETAL_PROJ_HELLO_WORLD
	CONT0_BAREMETAL_PROJ_THREADS_DEMO
	CONT0_BAREMETAL_PROJ_TEST_SUITE
	CONT0_BAREMETAL_PROJ_UART_SERVICE
	CONT0_BAREMETAL_PROJ_TIMER_SERVICE
	CONT0_BAREMETAL_PROJ_KMI_SERVICE
	CONT0_BAREMETAL_PROJ_MUTEX_DEMO
	CONT0_BAREMETAL_PROJ_IPC_DEMO
	default CONT0_BAREMETAL_PROJ_EMPTY

menu cont0_pager_linker_params
	CONT0_PAGER_LMA@
	CONT0_PAGER_VMA@

menu cont0_posix_pager_params
	CONT0_PAGER_SHM_START@
	CONT0_PAGER_SHM_END@
	CONT0_PAGER_TASK_START@
	CONT0_PAGER_TASK_END@
	CONT0_PAGER_UTCB_START@
	CONT0_PAGER_UTCB_END@

menu cont0_linux_pager_params
	CONT0_LINUX_PHYS_OFFSET@
	CONT0_LINUX_ZRELADDR@
	CONT0_LINUX_ROOTFS_ADDRESS@
	CONT0_LINUX_PAGE_OFFSET@

menu cont0_virtmem_list
	CONT0_PAGER_VIRTMEM_REGIONS%
	CONT0_PAGER_VIRT0_START@
	CONT0_PAGER_VIRT0_END@
	CONT0_PAGER_VIRT1_START@
	CONT0_PAGER_VIRT1_END@
	CONT0_PAGER_VIRT2_START@
	CONT0_PAGER_VIRT2_END@
	CONT0_PAGER_VIRT3_START@
	CONT0_PAGER_VIRT3_END@
	CONT0_PAGER_VIRT4_START@
	CONT0_PAGER_VIRT4_END@
	CONT0_PAGER_VIRT5_START@
	CONT0_PAGER_VIRT5_END@

menu cont0_physmem_list
	CONT0_PAGER_PHYSMEM_REGIONS%
	CONT0_PAGER_PHYS0_START@
	CONT0_PAGER_PHYS0_END@
	CONT0_PAGER_PHYS1_START@
	CONT0_PAGER_PHYS1_END@
	CONT0_PAGER_PHYS2_START@
	CONT0_PAGER_PHYS2_END@
	CONT0_PAGER_PHYS3_START@
	CONT0_PAGER_PHYS3_END@

#
# Settings for Custom Capabilities
#
choices cont0_pager_cap_custom0_type
	CONT0_PAGER_CAP_CUSTOM0_IPC_TYPE
	default CONT0_PAGER_CAP_CUSTOM0_IPC_TYPE
choices cont0_pager_cap_custom1_type
	CONT0_PAGER_CAP_CUSTOM1_IPC_TYPE
	default CONT0_PAGER_CAP_CUSTOM1_IPC_TYPE
choices cont0_pager_cap_custom2_type
	CONT0_PAGER_CAP_CUSTOM2_IPC_TYPE
	default CONT0_PAGER_CAP_CUSTOM2_IPC_TYPE
choices cont0_pager_cap_custom3_type
	CONT0_PAGER_CAP_CUSTOM3_IPC_TYPE
	default CONT0_PAGER_CAP_CUSTOM3_IPC_TYPE

default CONT0_PAGER_CAP_CUSTOM0_USE	from n
default CONT0_PAGER_CAP_CUSTOM1_USE	from n
default CONT0_PAGER_CAP_CUSTOM2_USE	from n
default CONT0_PAGER_CAP_CUSTOM3_USE	from n

menu cont0_pager_cap_custom0
	CONT0_PAGER_CAP_CUSTOM0_USE
	cont0_pager_cap_custom0_type
	CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	CONT0_PAGER_CAP_CUSTOM0_TARGET%

menu cont0_pager_cap_custom1
	CONT0_PAGER_CAP_CUSTOM1_USE
	cont0_pager_cap_custom1_type
	CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	CONT0_PAGER_CAP_CUSTOM1_TARGET%

menu cont0_pager_cap_custom2
	CONT0_PAGER_CAP_CUSTOM2_USE
	cont0_pager_cap_custom2_type
	CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	CONT0_PAGER_CAP_CUSTOM2_TARGET%

menu cont0_pager_cap_custom3
	CONT0_PAGER_CAP_CUSTOM3_USE
	cont0_pager_cap_custom3_type
	CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	CONT0_PAGER_CAP_CUSTOM3_TARGET%

choicegroup CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	    CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	    default CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER from y

choicegroup CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	    CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	    default CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER from y

choicegroup CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	    CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	    default CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER from y

choicegroup CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	    CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	    CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	    default CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER from y

when CONT0_PAGER_CAP_CUSTOM0_USE == n
	suppress cont0_pager_cap_custom0_type
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET

when CONT0_PAGER_CAP_CUSTOM1_USE == n
	suppress cont0_pager_cap_custom1_type
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET

when CONT0_PAGER_CAP_CUSTOM2_USE == n
	suppress cont0_pager_cap_custom2_type
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET

when CONT0_PAGER_CAP_CUSTOM3_USE == n
	suppress cont0_pager_cap_custom3_type
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET

when CONT0_PAGER_CAP_CUSTOM0_IPC_TYPE == n
	suppress CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM0_TARGET

when CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER or
     CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_PAGER_CAP_CUSTOM0_TARGET

when CONT0_PAGER_CAP_CUSTOM1_IPC_TYPE == n
	suppress CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM1_TARGET

when CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER or
     CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_PAGER_CAP_CUSTOM1_TARGET

when CONT0_PAGER_CAP_CUSTOM2_IPC_TYPE == n
	suppress CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM2_TARGET

when CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER or
     CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_PAGER_CAP_CUSTOM2_TARGET

when CONT0_PAGER_CAP_CUSTOM3_IPC_TYPE == n
	suppress CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT0_PAGER_CAP_CUSTOM3_TARGET

when CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER or
     CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_PAGER_CAP_CUSTOM3_TARGET

default CONT0_PAGER_CAP_CUSTOM0_TARGET		from 0
default CONT0_PAGER_CAP_CUSTOM1_TARGET		from 0
default CONT0_PAGER_CAP_CUSTOM2_TARGET		from 0
default CONT0_PAGER_CAP_CUSTOM3_TARGET		from 0

# Symbols for Custom Capabilities
symbols

#
# CUSTOM CAPABILITY 0
#
CONT0_PAGER_CAP_CUSTOM0_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont0_pager_cap_custom0_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT0_PAGER_CAP_CUSTOM0_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT0_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT0_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT0_PAGER_CAP_CUSTOM0_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 1
#
CONT0_PAGER_CAP_CUSTOM1_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont0_pager_cap_custom1_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT0_PAGER_CAP_CUSTOM1_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT0_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT0_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT0_PAGER_CAP_CUSTOM1_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.


#
# CUSTOM CAPABILITY 2
#
CONT0_PAGER_CAP_CUSTOM2_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont0_pager_cap_custom2_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT0_PAGER_CAP_CUSTOM2_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT0_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT0_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT0_PAGER_CAP_CUSTOM2_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 3
#
CONT0_PAGER_CAP_CUSTOM3_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont0_pager_cap_custom3_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT0_PAGER_CAP_CUSTOM3_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT0_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT0_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT0_PAGER_CAP_CUSTOM3_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

# Symbols for Generic Capabilities
symbols
CONT0_PAGER_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER 		'Capability Targets Current Container'		text
Capability targets current container, including all spaces and threads present inside this container.
.

CONT0_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 		'Capability Targets Current Pager`s Space'	text
Capability targets space associated with pager of this container.
.

CONT0_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER		'Capability Targets Another Container'		text
Capability targets pager of another container.
.

CONT0_PAGER_CAP_IPC_TARGET_OTHER_PAGER			'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container.
.

CONT0_PAGER_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

CONT0_PAGER_CAP_IRQCTRL_USE				'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT0_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT0_CAP_IPC_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT0_CAP_IPC_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT0_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

symbols
CONT0_PAGER_CAP_THREADPOOL_SIZE	'Number of Threads'				text
Total number of threads in this pool.
.

CONT0_PAGER_CAP_SPACEPOOL_SIZE	'Number of Address Spaces'			text
Total number of spaces in this pool.
.

CONT0_PAGER_CAP_MAPPOOL_SIZE	'Number of PMD Mappings'			text
Total number of pmds(E.g. Middle-level Page Tables) in this pool.
.

CONT0_PAGER_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT0_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT0_PAGER_CAP_THREADPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_PAGER_CAP_SPACEPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_PAGER_CAP_MAPPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_PAGER_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT0_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

cont0_pager_cap_threadpool	'Container 0 Thread Pool Capability'		text
It controls the number of threads allowed to be created in the container.
.

cont0_pager_cap_spacepool	'Container 0 Space Pool Capability'		text
It controls the number of spaces allowed to be created in the container.
.

cont0_pager_cap_mutexpool	'Container 0 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont0_cap_mutexpool	'Container 0 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont0_pager_cap_mappool		'Container 0 Map Pool Capability'			text
It defines the mapping pools/caches for various kinds of structures used in the container.
.


cont0_pager_cap_ipc		'Container 0 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont0_cap_ipc		'Container 0 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont0_pager_cap_irqctrl		'Container 0 IRQ Control Capability'		text
Capability associated with irq control features and permissions.
.

cont0_pager_cap_custom0 		'Container 0 Custom Capability 0 Parameters'	text
Custom capability.
.

cont0_pager_cap_custom1 		'Container 0 Custom Capability 1 Parameters'	text
Custom capability.
.

cont0_pager_cap_custom2 		'Container 0 Custom Capability 2 Parameters'	text
Custom capability.
.

cont0_pager_cap_custom3		'Container 0 Custom Capability 3 Parameters'	text
Custom capability.
.

cont0_pager_capability_list	'Container 0 Pager Capabilities'			text
List of capabilities associated with Container0's Pager task
.

cont0_capability_list	'Container 0 Global Capabilities'		text
List of capabilities globally associated with all tasks inside Container0.

These capabilities can be used by tasks inside Container0.
.


default CONT0_PAGER_CAP_THREADPOOL_SIZE	from 64
default CONT0_PAGER_CAP_SPACEPOOL_SIZE	from 64
default CONT0_PAGER_CAP_MAPPOOL_SIZE	from 800
default CONT0_PAGER_CAP_MUTEXPOOL_SIZE	from 100
default CONT0_CAP_MUTEXPOOL_SIZE	from 100

default CONT0_PAGER_CAP_THREADPOOL_USE	from y
default CONT0_PAGER_CAP_SPACEPOOL_USE	from y
default CONT0_PAGER_CAP_MAPPOOL_USE	from y
default CONT0_PAGER_CAP_MUTEXPOOL_USE	from y
default CONT0_CAP_MUTEXPOOL_USE	from y

# Use Rules for Generic Capabilities
when CONT0_PAGER_CAP_THREADPOOL_USE == n
	suppress CONT0_PAGER_CAP_THREADPOOL_SIZE
when CONT0_PAGER_CAP_SPACEPOOL_USE == n
	suppress CONT0_PAGER_CAP_SPACEPOOL_SIZE
when CONT0_PAGER_CAP_MAPPOOL_USE == n
	suppress CONT0_PAGER_CAP_MAPPOOL_SIZE
when CONT0_PAGER_CAP_MUTEXPOOL_USE == n
	suppress CONT0_PAGER_CAP_MUTEXPOOL_SIZE

when CONT0_CAP_MUTEXPOOL_USE == n
	suppress CONT0_CAP_MUTEXPOOL_SIZE

when CONT0_PAGER_CAP_IPC_USE == n
	suppress CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT0_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT0_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT0_PAGER_CAP_IPC_TARGET_OTHER_PAGER

when CONT0_CAP_IPC_USE == n
	suppress CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT0_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT0_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT0_CAP_IPC_TARGET_OTHER_PAGER

when CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT0_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_PAGER_CAP_IPC_TARGET

when CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT0_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT0_CAP_IPC_TARGET

choicegroup CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT0_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT0_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT0_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER from y

choicegroup CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT0_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT0_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT0_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER from y

default CONT0_PAGER_CAP_IPC_USE		from y
default CONT0_PAGER_CAP_IRQCTRL_USE	from y
default CONT0_CAP_IPC_USE			from y

default CONT0_PAGER_CAP_IPC_TARGET	from 0
default CONT0_CAP_IPC_TARGET	from 0

# Capability Menus
menu cont0_pager_cap_irqctrl
	CONT0_PAGER_CAP_IRQCTRL_USE

menu cont0_pager_cap_ipc
	CONT0_PAGER_CAP_IPC_USE
	CONT0_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT0_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT0_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT0_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	CONT0_PAGER_CAP_IPC_TARGET%

menu cont0_pager_cap_threadpool
	CONT0_PAGER_CAP_THREADPOOL_USE
	CONT0_PAGER_CAP_THREADPOOL_SIZE%

menu cont0_pager_cap_spacepool
	CONT0_PAGER_CAP_SPACEPOOL_USE
	CONT0_PAGER_CAP_SPACEPOOL_SIZE%

menu cont0_pager_cap_mappool
	CONT0_PAGER_CAP_MAPPOOL_USE
	CONT0_PAGER_CAP_MAPPOOL_SIZE%

menu cont0_pager_cap_mutexpool
	CONT0_PAGER_CAP_MUTEXPOOL_USE
	CONT0_PAGER_CAP_MUTEXPOOL_SIZE%

menu cont0_pager_capability_list
	cont0_pager_cap_threadpool
	cont0_pager_cap_spacepool
	cont0_pager_cap_mutexpool
	cont0_pager_cap_mappool
	cont0_pager_cap_ipc
	cont0_pager_cap_irqctrl
	cont0_pager_cap_custom0
	cont0_pager_cap_custom1
	cont0_pager_cap_custom2
	cont0_pager_cap_custom3

menu cont0_cap_ipc
	CONT0_CAP_IPC_USE
	CONT0_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT0_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT0_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT0_CAP_IPC_TARGET_OTHER_PAGER
	CONT0_CAP_IPC_TARGET%

menu cont0_cap_mutexpool
	CONT0_CAP_MUTEXPOOL_USE
	CONT0_CAP_MUTEXPOOL_SIZE%

menu cont0_capability_list
	cont0_cap_ipc
	cont0_cap_mutexpool

# menu cont0_pager_params

menu container0_options
	CONT0_OPT_NAME$
	cont0_baremetal_params
#	cont0_pager_params
	cont0_linux_pager_params
	cont0_pager_linker_params
	cont0_posix_pager_params
	cont0_physmem_list
	cont0_virtmem_list
	cont0_pager_capability_list
	cont0_capability_list

choices container0_type
	CONT0_TYPE_BAREMETAL
	CONT0_TYPE_POSIX
	CONT0_TYPE_LINUX
        default CONT0_TYPE_BAREMETAL

menu cont0_menu
	container0_type
	container0_options
symbols

CONT1_TYPE_LINUX		'Linux Container'	text
Virtualized linux container.
.

CONT1_TYPE_BAREMETAL	'Baremetal Container'	text
Baremetal containers.
These containers contain various demos describing the usage of various system calls, accessing devices etc.
.

CONT1_TYPE_POSIX		'POSIX Container'	text
Posix container displaying a real posix system running over the hypervisor.
.

CONT1_OPT_NAME		'Project Name'		text
Project name for container1 in this build.
.

CONTAINERS              'Number of containers'		text
Number of containers to be configured.

The maximum number of containers that can be configured is set to 4.
.


CONT1_PAGER_PHYSMEM_REGIONS	'Container 1 Number of Physical Regions'		text
Number of physical memory regions alloted to container1.

A maximum of 4 physical memory regions can be alloted to each container.
.

CONT1_PAGER_PHYS0_START		'Container 1 Pager Physical Region 0 Start Address'	text
Start address of physical memory region 0 for container1.
.

CONT1_PAGER_PHYS0_END		'Container 1 Pager Physical Region 0 End Address'	text
End address of physical memory region 0 for container1.
.

CONT1_PAGER_PHYS1_START		'Container 1 Pager Physical Region 1 Start Address'	text
Start address of physical memory region 1 for container1.
.

CONT1_PAGER_PHYS1_END		'Container 1 Pager Physical Region 1 End Address'	text
End address of physical memory region 1 for container1.
.

CONT1_PAGER_PHYS2_START		'Container 1 Pager Physical Region 2 Start Address'	text
Start address of physical memory region 2 for container1.
.

CONT1_PAGER_PHYS2_END		'Container 1 Pager Physical Region 2 End Address'	text
End address of physical memory region 2 for container1.
.

CONT1_PAGER_PHYS3_START		'Container 1 Pager Physical Region 3 Start Address'	text
Start address of physical memory region 3 for container1.
.

CONT1_PAGER_PHYS3_END		'Container 1 Pager Physical Region 3 End Address'	text
End address of physical memory region 3 for container1.
.

symbols
CONT1_PAGER_VIRTMEM_REGIONS	'Container 1 Number of Virtual Regions'		text
Number of virtual memory regions alloted to container1.

A maximum of 6 virtual memory regions can be alloted to each container.
.

CONT1_PAGER_VIRT0_START	'Container 1 Pager Virtual Region 0 Start Address'		text
Start address of virtual memory region 0 for container1.
.

CONT1_PAGER_VIRT0_END	'Container 1 Pager Virtual Region 0 End Address'			text
End address of virtual memory region 0 for container1.
.

CONT1_PAGER_VIRT1_START	'Container 1 Pager Virtual Region 1 Start Address'		text
Start address of virtual memory region 1 for container1.
.

CONT1_PAGER_VIRT1_END	'Container 1 Pager Virtual Region 1 End Address'			text
End address of virtual memory region 1 for container1.
.

CONT1_PAGER_VIRT2_START	'Container 1 Pager Virtual Region 2 Start Address'		text
Start address of virtual memory region 2 for container1.
.

CONT1_PAGER_VIRT2_END	'Container 1 Pager Virtual Region 2 End Address'			text
End address of virtual memory region 2 for container1.
.

CONT1_PAGER_VIRT3_START	'Container 1 Pager Virtual Region 3 Start Address'		text
Start address of virtual memory region 3 for container1.
.

CONT1_PAGER_VIRT3_END	'Container 1 Pager Virtual Region 3 End Address'			text
End address of virtual memory region 3 for container1.
.

CONT1_PAGER_VIRT4_START	'Container 1 Pager Virtual Region 4 Start Address'		text
Start address of virtual memory region 4 for container1.
.

CONT1_PAGER_VIRT4_END	'Container 1 Pager Virtual Region 4 End Address'			text
End address of virtual memory region 4 for container1.
.

CONT1_PAGER_VIRT5_START	'Container 1 Pager Virtual Region 5 Start Address'		text
Start address of virtual memory region 5 for container1.
.

CONT1_PAGER_VIRT5_END	'Container 1 Pager Virtual Region 5 End Address'			text
End address of virtual memory region 5 for container1.
.

# FIXME: We dont need to pass PAGER_LMA and PAGER_VMA to config.h now
# as we are using them just to derive other symbols, in this file only
CONT1_PAGER_LMA		'Container 1 Pager LMA'				text
Physical memory address for loading the pager of container1.
.

CONT1_PAGER_VMA		'Container 1 Pager VMA'				text
Virtual memory address for loading the pager of container1.
.

CONT1_PAGER_SHM_START	'Container 1 Shared Mappings Region Start'		text
Start of virtual memory region to be used for shared mappings for container1.
.

CONT1_PAGER_SHM_END	'Container 1 Shared Mappings Region End'		text
End of virtual memory region to be used for shared mappings for container1.
.

CONT1_PAGER_TASK_START	'Container 1 Task Address Space Region Start'	text
Start of virtual memory region to be used for address spaces generation
for the new tasks created in container1.
.

CONT1_PAGER_TASK_END	'Container 1 Task Address Space Region End'	text
End of virtual memory region to be used for address spaces generation
for the new tasks created in container1.
.

CONT1_PAGER_UTCB_START	'Container 1 UTCB Mappings Region Start'		text
Start of virtual memory region to be used for allocating utcbs of threads in container1.
.

CONT1_PAGER_UTCB_END	'Container 1 UTCB Mappings Region End'		text
End of virtual memory region to be used for allocating utcbs of threads in container1.
.

CONT1_LINUX_ZRELADDR       'Container 1 Linux ZRELADDR Parameter'		text
ZRELADDR parameter of linux kernel.

This refers to the physical memory address where uncompressed linux kernel will be loaded.
This should be within the physical memory regions assigned to linux container.
.

CONT1_LINUX_PAGE_OFFSET	'Container 1 Linux PAGE_OFFSET Parameter'		text
PAGE_OFFSET parameter of linux kernel.

This refers to the virtual memory address from where the virtual memory region
of linux kernel starts.
This should be within the virtual memory regions assigned to linux container.
.

CONT1_LINUX_PHYS_OFFSET	'Container 1 Linux PHYS_OFFSET Parameter'		text
PHYS_OFFSET parameter of linux kernel.

This refers to the beginning address of physical memory region avaialable to linux container/kernel.
.

CONT1_LINUX_ROOTFS_ADDRESS	'Container 1 Linux ROOTFS Address'			text
Virtual memory address where root filesystem, to be used by linux kernel, will be located.

This should be within the range of virtual memory regions assigned to linux container/kernel.
.

default CONT1_PAGER_LMA	 	from CONT1_PAGER_PHYS0_START
default CONT1_PAGER_VMA	 	from CONT1_PAGER_VIRT0_START
default CONT1_PAGER_SHM_START	from CONT1_PAGER_VIRT1_START
default CONT1_PAGER_SHM_END	from CONT1_PAGER_VIRT1_END
default CONT1_PAGER_TASK_START	from CONT1_PAGER_VIRT2_START
default CONT1_PAGER_TASK_END	from CONT1_PAGER_VIRT2_END
default CONT1_PAGER_UTCB_START	from CONT1_PAGER_VIRT3_START
default CONT1_PAGER_UTCB_END	from CONT1_PAGER_VIRT3_END
default CONT1_LINUX_ZRELADDR	from (CONT1_LINUX_PHYS_OFFSET + 0x8000)
default CONT1_LINUX_PAGE_OFFSET 	from CONT1_PAGER_VIRT0_START
default CONT1_LINUX_PHYS_OFFSET 	from CONT1_PAGER_PHYS0_START
default CONT1_LINUX_ROOTFS_ADDRESS	from (CONT1_LINUX_PHYS_OFFSET + 0x500000)

default CONT1_PAGER_VIRTMEM_REGIONS from (CONT1_TYPE_POSIX==y ? 4 : 1)
default CONT1_PAGER_PHYSMEM_REGIONS from 1

# Define limits on virtual and physical memory regions of a _single_ container 0. Too much code!
when CONT1_PAGER_VIRTMEM_REGIONS < 2 suppress CONT1_PAGER_VIRT1_START CONT1_PAGER_VIRT1_END
when CONT1_PAGER_VIRTMEM_REGIONS < 2 suppress CONT1_PAGER_VIRT2_START CONT1_PAGER_VIRT2_END
when CONT1_PAGER_VIRTMEM_REGIONS < 2 suppress CONT1_PAGER_VIRT3_START CONT1_PAGER_VIRT3_END
when CONT1_PAGER_VIRTMEM_REGIONS < 2 suppress CONT1_PAGER_VIRT4_START CONT1_PAGER_VIRT4_END
when CONT1_PAGER_VIRTMEM_REGIONS < 2 suppress CONT1_PAGER_VIRT5_START CONT1_PAGER_VIRT5_END

when CONT1_PAGER_VIRTMEM_REGIONS < 3 suppress CONT1_PAGER_VIRT2_START CONT1_PAGER_VIRT2_END
when CONT1_PAGER_VIRTMEM_REGIONS < 3 suppress CONT1_PAGER_VIRT3_START CONT1_PAGER_VIRT3_END
when CONT1_PAGER_VIRTMEM_REGIONS < 3 suppress CONT1_PAGER_VIRT4_START CONT1_PAGER_VIRT4_END
when CONT1_PAGER_VIRTMEM_REGIONS < 3 suppress CONT1_PAGER_VIRT5_START CONT1_PAGER_VIRT5_END

when CONT1_PAGER_VIRTMEM_REGIONS < 4 suppress CONT1_PAGER_VIRT3_START CONT1_PAGER_VIRT3_END
when CONT1_PAGER_VIRTMEM_REGIONS < 4 suppress CONT1_PAGER_VIRT4_START CONT1_PAGER_VIRT4_END
when CONT1_PAGER_VIRTMEM_REGIONS < 4 suppress CONT1_PAGER_VIRT5_START CONT1_PAGER_VIRT5_END

when CONT1_PAGER_VIRTMEM_REGIONS < 5 suppress CONT1_PAGER_VIRT4_START CONT1_PAGER_VIRT4_END
when CONT1_PAGER_VIRTMEM_REGIONS < 5 suppress CONT1_PAGER_VIRT5_START CONT1_PAGER_VIRT5_END

when CONT1_PAGER_VIRTMEM_REGIONS < 6 suppress CONT1_PAGER_VIRT5_START CONT1_PAGER_VIRT5_END


when CONT1_PAGER_PHYSMEM_REGIONS < 2 suppress CONT1_PAGER_PHYS1_START CONT1_PAGER_PHYS1_END
when CONT1_PAGER_PHYSMEM_REGIONS < 2 suppress CONT1_PAGER_PHYS2_START CONT1_PAGER_PHYS2_END
when CONT1_PAGER_PHYSMEM_REGIONS < 2 suppress CONT1_PAGER_PHYS3_START CONT1_PAGER_PHYS3_END

when CONT1_PAGER_PHYSMEM_REGIONS < 3 suppress CONT1_PAGER_PHYS2_START CONT1_PAGER_PHYS2_END
when CONT1_PAGER_PHYSMEM_REGIONS < 3 suppress CONT1_PAGER_PHYS3_START CONT1_PAGER_PHYS3_END

when CONT1_PAGER_PHYSMEM_REGIONS < 4 suppress CONT1_PAGER_PHYS3_START CONT1_PAGER_PHYS3_END

# We assume kernel uses 0x0 - 0x40000 physical RAM.
# Physical Regions for containers should start after kernel.
require CONT1_PAGER_PHYS0_START >= 0x40000
require CONT1_PAGER_PHYS1_START >= 0x40000
require CONT1_PAGER_PHYS2_START >= 0x40000
require CONT1_PAGER_PHYS3_START >= 0x40000

# TODO: We can add check for end address of physical region to be
# less than RAM SIZE, need to find out RAM SIZE?

# Rules for Linux kernel parameters
require CONT1_LINUX_ZRELADDR > CONT1_LINUX_PHYS_OFFSET + 0x8000

# TODO: Do we want to check if PAGER_LMA/VMA lies in allocated memory regions
default CONT1_PAGER_PHYS0_START from ((1 == 0 ? 0x100000 : (0x100000 + 1 * 0x1000000)) + RAM_BASE_PLAT)
default	CONT1_PAGER_PHYS0_END	from (CONT1_PAGER_PHYS0_START + 0xD00000)
default CONT1_PAGER_PHYS1_START	from CONT1_PAGER_PHYS0_END
default CONT1_PAGER_PHYS1_END	from (CONT1_PAGER_PHYS1_START + 0x100000)
default CONT1_PAGER_PHYS2_START	from CONT1_PAGER_PHYS1_END
default CONT1_PAGER_PHYS2_END	from (CONT1_PAGER_PHYS2_START + 0x100000)
default CONT1_PAGER_PHYS3_START	from CONT1_PAGER_PHYS2_END
default CONT1_PAGER_PHYS3_END	from (CONT1_PAGER_PHYS3_START + 0x100000)

default CONT1_PAGER_VIRT0_START	from (1 == 0 ? 0xa0000000 : (0xa0000000 + 1 * 0x10000000))
default CONT1_PAGER_VIRT0_END	from (CONT1_PAGER_VIRT0_START + 0x10000000)
default CONT1_PAGER_VIRT1_START	from (1 == 0 ? 0x80000000 : (0x80000000 + 1 * 0x8000000))
default CONT1_PAGER_VIRT1_END	from (CONT1_PAGER_VIRT1_START + 0x8000000)
default CONT1_PAGER_VIRT2_START	from (1 == 0 ? 0x40000000 : (0x40000000 + 1 * 0x10000000))
default CONT1_PAGER_VIRT2_END	from (CONT1_PAGER_VIRT2_START + 0x10000000)
default CONT1_PAGER_VIRT3_START	from (1 == 0 ? 0xf8100000 : (0xf8100000 + 1 * 0x100000))
default CONT1_PAGER_VIRT3_END	from (CONT1_PAGER_VIRT3_START + 0x100000)
default CONT1_PAGER_VIRT4_START	from (1 == 0 ? 0x10000000 : (0x10000000 + 1 * 0x10000000))
default CONT1_PAGER_VIRT4_END	from (CONT1_PAGER_VIRT4_START + 0x10000000)
default CONT1_PAGER_VIRT5_START	from 0xe0000000
default CONT1_PAGER_VIRT5_END	from 0xf0000000

default CONT1_OPT_NAME from
(CONT1_TYPE_LINUX==y) ? "linux1" :
((CONT1_TYPE_POSIX==y) ? "posix1" :
((CONT1_BAREMETAL_PROJ_HELLO_WORLD==y) ? "hello_world1" :
((CONT1_BAREMETAL_PROJ_THREADS_DEMO==y) ? "thread_demo1" :
((CONT1_BAREMETAL_PROJ_TEST_SUITE==y) ? "test_suite1" :
((CONT1_BAREMETAL_PROJ_UART_SERVICE==y) ? "uart_service1" :
((CONT1_BAREMETAL_PROJ_KMI_SERVICE==y) ? "kmi_service1" :
((CONT1_BAREMETAL_PROJ_MUTEX_DEMO==y) ? "mutex_demo1" :
((CONT1_BAREMETAL_PROJ_IPC_DEMO==y) ? "ipc_demo1" :
((CONT1_BAREMETAL_PROJ_TIMER_SERVICE==y) ? "timer_service1" : "empty1")))))))))

when CONT1_TYPE_LINUX==y suppress cont1_pager_linker_params
unless CONT1_TYPE_POSIX==y suppress cont1_posix_pager_params
unless CONT1_TYPE_LINUX==y suppress cont1_linux_pager_params
unless CONT1_TYPE_BAREMETAL==y suppress cont1_baremetal_params

# derive symbols, for cinfo.c, depending on the type of container selected
derive CONT1_PAGER_LOAD_ADDR from (CONT1_TYPE_LINUX==y) ? CONT1_LINUX_PHYS_OFFSET : CONT1_PAGER_LMA
derive CONT1_PAGER_VIRT_ADDR from (CONT1_TYPE_LINUX==y) ? CONT1_LINUX_PAGE_OFFSET : CONT1_PAGER_VMA
derive CONT1_START_PC_ADDR from (CONT1_TYPE_LINUX != y) ? CONT1_PAGER_VMA : (CONT1_LINUX_PAGE_OFFSET + CONT1_LINUX_ZRELADDR - CONT1_LINUX_PHYS_OFFSET)

symbols
cont1_menu		'Container 1 Parameters'					text
List of parameters associated with container1.

All parameters are provided with default values, appropriate for defualt configurations of
various containers.
.

cont1_physmem_list	'Container 1 Pager Physical Memory Regions (Capabilities)'	text
List of physical memory regions to be used by container1.
.

cont1_virtmem_list	'Container 1 Pager Virtual Memory Regions (Capabilities)'	text
List of virtual memory regions to be used by container1.
.

container1_type	'Container 1 Type'						text
Container type.
.

#cont1_pager_params	'Container 1 Pager Parameters'			text
#Configuration parameters associated with container1 pager.
#.

container1_options	'Container 1 Options'					text
Configuration parameters associated with container1.
.

cont1_linux_pager_params	'Container 1 Linux Pager Parameters'		text
Configuration parameters associated with pager of container1.
.

cont1_pager_linker_params	'Container 1 Pager Linker Parameters'		text
Pager's linker parameters. These allow shifting the pager image in physical and virtual
address spaces.

For correct functioning, the LMA parameter should match with one of the
defined physical memory capabilities.

The VMA parameter should match with one of the defined virtual memory
capabilities.
.

cont1_posix_pager_params	'Container 1 POSIX Pager Parameters'		text
Configuration parameters associated with pager of container1.
.

cont1_baremetal_params		'Baremetal Project Type'			text
Select the type of sources to include in this baremetal container
.

CONT1_BAREMETAL_PROJ_EMPTY		'Empty Project'					text
Empty container.

This includes the bare minimum sources required to build a container.
.

CONT1_BAREMETAL_PROJ_HELLO_WORLD	'Hello World'					text
Hello world container

This includes a main.c with a hello world message printed on the console.
.

CONT1_BAREMETAL_PROJ_THREADS_DEMO	'Thread Library Demo'				text
Baremetal container demonstrating usage of libl4 thread library and associated API.
.

CONT1_BAREMETAL_PROJ_TEST_SUITE   	'Microkernel Tests'				text
Baremetal container demonstrating some API usage cases and tests.
.

CONT1_BAREMETAL_PROJ_UART_SERVICE	'UART Service'					text
Baremetal container demonstrating usage of uart devices.
.

CONT1_BAREMETAL_PROJ_TIMER_SERVICE 'Timer Service'					text
Baremetal container displaying usage of timer devices.
.

CONT1_BAREMETAL_PROJ_KMI_SERVICE 	'Keyboard Mouse Service'			text
Baremetal container displaying usage of mouse and keyboard devices.
.

CONT1_BAREMETAL_PROJ_MUTEX_DEMO	'Mutex Demo'					text
Baremetal container displaying usage of mutexes.
.

CONT1_BAREMETAL_PROJ_IPC_DEMO	'IPC Demo'					text
Baremetal container displaying usage of ipc calls.
.


choices cont1_baremetal_params
	CONT1_BAREMETAL_PROJ_EMPTY
	CONT1_BAREMETAL_PROJ_HELLO_WORLD
	CONT1_BAREMETAL_PROJ_THREADS_DEMO
	CONT1_BAREMETAL_PROJ_TEST_SUITE
	CONT1_BAREMETAL_PROJ_UART_SERVICE
	CONT1_BAREMETAL_PROJ_TIMER_SERVICE
	CONT1_BAREMETAL_PROJ_KMI_SERVICE
	CONT1_BAREMETAL_PROJ_MUTEX_DEMO
	CONT1_BAREMETAL_PROJ_IPC_DEMO
	default CONT1_BAREMETAL_PROJ_EMPTY

menu cont1_pager_linker_params
	CONT1_PAGER_LMA@
	CONT1_PAGER_VMA@

menu cont1_posix_pager_params
	CONT1_PAGER_SHM_START@
	CONT1_PAGER_SHM_END@
	CONT1_PAGER_TASK_START@
	CONT1_PAGER_TASK_END@
	CONT1_PAGER_UTCB_START@
	CONT1_PAGER_UTCB_END@

menu cont1_linux_pager_params
	CONT1_LINUX_PHYS_OFFSET@
	CONT1_LINUX_ZRELADDR@
	CONT1_LINUX_ROOTFS_ADDRESS@
	CONT1_LINUX_PAGE_OFFSET@

menu cont1_virtmem_list
	CONT1_PAGER_VIRTMEM_REGIONS%
	CONT1_PAGER_VIRT0_START@
	CONT1_PAGER_VIRT0_END@
	CONT1_PAGER_VIRT1_START@
	CONT1_PAGER_VIRT1_END@
	CONT1_PAGER_VIRT2_START@
	CONT1_PAGER_VIRT2_END@
	CONT1_PAGER_VIRT3_START@
	CONT1_PAGER_VIRT3_END@
	CONT1_PAGER_VIRT4_START@
	CONT1_PAGER_VIRT4_END@
	CONT1_PAGER_VIRT5_START@
	CONT1_PAGER_VIRT5_END@

menu cont1_physmem_list
	CONT1_PAGER_PHYSMEM_REGIONS%
	CONT1_PAGER_PHYS0_START@
	CONT1_PAGER_PHYS0_END@
	CONT1_PAGER_PHYS1_START@
	CONT1_PAGER_PHYS1_END@
	CONT1_PAGER_PHYS2_START@
	CONT1_PAGER_PHYS2_END@
	CONT1_PAGER_PHYS3_START@
	CONT1_PAGER_PHYS3_END@

#
# Settings for Custom Capabilities
#
choices cont1_pager_cap_custom0_type
	CONT1_PAGER_CAP_CUSTOM0_IPC_TYPE
	default CONT1_PAGER_CAP_CUSTOM0_IPC_TYPE
choices cont1_pager_cap_custom1_type
	CONT1_PAGER_CAP_CUSTOM1_IPC_TYPE
	default CONT1_PAGER_CAP_CUSTOM1_IPC_TYPE
choices cont1_pager_cap_custom2_type
	CONT1_PAGER_CAP_CUSTOM2_IPC_TYPE
	default CONT1_PAGER_CAP_CUSTOM2_IPC_TYPE
choices cont1_pager_cap_custom3_type
	CONT1_PAGER_CAP_CUSTOM3_IPC_TYPE
	default CONT1_PAGER_CAP_CUSTOM3_IPC_TYPE

default CONT1_PAGER_CAP_CUSTOM0_USE	from n
default CONT1_PAGER_CAP_CUSTOM1_USE	from n
default CONT1_PAGER_CAP_CUSTOM2_USE	from n
default CONT1_PAGER_CAP_CUSTOM3_USE	from n

menu cont1_pager_cap_custom0
	CONT1_PAGER_CAP_CUSTOM0_USE
	cont1_pager_cap_custom0_type
	CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	CONT1_PAGER_CAP_CUSTOM0_TARGET%

menu cont1_pager_cap_custom1
	CONT1_PAGER_CAP_CUSTOM1_USE
	cont1_pager_cap_custom1_type
	CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	CONT1_PAGER_CAP_CUSTOM1_TARGET%

menu cont1_pager_cap_custom2
	CONT1_PAGER_CAP_CUSTOM2_USE
	cont1_pager_cap_custom2_type
	CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	CONT1_PAGER_CAP_CUSTOM2_TARGET%

menu cont1_pager_cap_custom3
	CONT1_PAGER_CAP_CUSTOM3_USE
	cont1_pager_cap_custom3_type
	CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	CONT1_PAGER_CAP_CUSTOM3_TARGET%

choicegroup CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	    CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	    default CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER from y

choicegroup CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	    CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	    default CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER from y

choicegroup CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	    CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	    default CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER from y

choicegroup CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	    CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	    CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	    default CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER from y

when CONT1_PAGER_CAP_CUSTOM0_USE == n
	suppress cont1_pager_cap_custom0_type
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET

when CONT1_PAGER_CAP_CUSTOM1_USE == n
	suppress cont1_pager_cap_custom1_type
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET

when CONT1_PAGER_CAP_CUSTOM2_USE == n
	suppress cont1_pager_cap_custom2_type
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET

when CONT1_PAGER_CAP_CUSTOM3_USE == n
	suppress cont1_pager_cap_custom3_type
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET

when CONT1_PAGER_CAP_CUSTOM0_IPC_TYPE == n
	suppress CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM0_TARGET

when CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER or
     CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_PAGER_CAP_CUSTOM0_TARGET

when CONT1_PAGER_CAP_CUSTOM1_IPC_TYPE == n
	suppress CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM1_TARGET

when CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER or
     CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_PAGER_CAP_CUSTOM1_TARGET

when CONT1_PAGER_CAP_CUSTOM2_IPC_TYPE == n
	suppress CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM2_TARGET

when CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER or
     CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_PAGER_CAP_CUSTOM2_TARGET

when CONT1_PAGER_CAP_CUSTOM3_IPC_TYPE == n
	suppress CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT1_PAGER_CAP_CUSTOM3_TARGET

when CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER or
     CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_PAGER_CAP_CUSTOM3_TARGET

default CONT1_PAGER_CAP_CUSTOM0_TARGET		from 0
default CONT1_PAGER_CAP_CUSTOM1_TARGET		from 0
default CONT1_PAGER_CAP_CUSTOM2_TARGET		from 0
default CONT1_PAGER_CAP_CUSTOM3_TARGET		from 0

# Symbols for Custom Capabilities
symbols

#
# CUSTOM CAPABILITY 0
#
CONT1_PAGER_CAP_CUSTOM0_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont1_pager_cap_custom0_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT1_PAGER_CAP_CUSTOM0_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT1_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT1_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT1_PAGER_CAP_CUSTOM0_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 1
#
CONT1_PAGER_CAP_CUSTOM1_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont1_pager_cap_custom1_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT1_PAGER_CAP_CUSTOM1_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT1_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT1_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT1_PAGER_CAP_CUSTOM1_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.


#
# CUSTOM CAPABILITY 2
#
CONT1_PAGER_CAP_CUSTOM2_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont1_pager_cap_custom2_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT1_PAGER_CAP_CUSTOM2_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT1_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT1_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT1_PAGER_CAP_CUSTOM2_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 3
#
CONT1_PAGER_CAP_CUSTOM3_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont1_pager_cap_custom3_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT1_PAGER_CAP_CUSTOM3_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT1_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT1_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT1_PAGER_CAP_CUSTOM3_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

# Symbols for Generic Capabilities
symbols
CONT1_PAGER_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER 		'Capability Targets Current Container'		text
Capability targets current container, including all spaces and threads present inside this container.
.

CONT1_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 		'Capability Targets Current Pager`s Space'	text
Capability targets space associated with pager of this container.
.

CONT1_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER		'Capability Targets Another Container'		text
Capability targets pager of another container.
.

CONT1_PAGER_CAP_IPC_TARGET_OTHER_PAGER			'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container.
.

CONT1_PAGER_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

CONT1_PAGER_CAP_IRQCTRL_USE				'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT1_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT1_CAP_IPC_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT1_CAP_IPC_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT1_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

symbols
CONT1_PAGER_CAP_THREADPOOL_SIZE	'Number of Threads'				text
Total number of threads in this pool.
.

CONT1_PAGER_CAP_SPACEPOOL_SIZE	'Number of Address Spaces'			text
Total number of spaces in this pool.
.

CONT1_PAGER_CAP_MAPPOOL_SIZE	'Number of PMD Mappings'			text
Total number of pmds(E.g. Middle-level Page Tables) in this pool.
.

CONT1_PAGER_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT1_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT1_PAGER_CAP_THREADPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_PAGER_CAP_SPACEPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_PAGER_CAP_MAPPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_PAGER_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT1_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

cont1_pager_cap_threadpool	'Container 1 Thread Pool Capability'		text
It controls the number of threads allowed to be created in the container.
.

cont1_pager_cap_spacepool	'Container 1 Space Pool Capability'		text
It controls the number of spaces allowed to be created in the container.
.

cont1_pager_cap_mutexpool	'Container 1 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont1_cap_mutexpool	'Container 1 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont1_pager_cap_mappool		'Container 1 Map Pool Capability'			text
It defines the mapping pools/caches for various kinds of structures used in the container.
.


cont1_pager_cap_ipc		'Container 1 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont1_cap_ipc		'Container 1 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont1_pager_cap_irqctrl		'Container 1 IRQ Control Capability'		text
Capability associated with irq control features and permissions.
.

cont1_pager_cap_custom0 		'Container 1 Custom Capability 0 Parameters'	text
Custom capability.
.

cont1_pager_cap_custom1 		'Container 1 Custom Capability 1 Parameters'	text
Custom capability.
.

cont1_pager_cap_custom2 		'Container 1 Custom Capability 2 Parameters'	text
Custom capability.
.

cont1_pager_cap_custom3		'Container 1 Custom Capability 3 Parameters'	text
Custom capability.
.

cont1_pager_capability_list	'Container 1 Pager Capabilities'			text
List of capabilities associated with Container1's Pager task
.

cont1_capability_list	'Container 1 Global Capabilities'		text
List of capabilities globally associated with all tasks inside Container1.

These capabilities can be used by tasks inside Container1.
.


default CONT1_PAGER_CAP_THREADPOOL_SIZE	from 64
default CONT1_PAGER_CAP_SPACEPOOL_SIZE	from 64
default CONT1_PAGER_CAP_MAPPOOL_SIZE	from 800
default CONT1_PAGER_CAP_MUTEXPOOL_SIZE	from 100
default CONT1_CAP_MUTEXPOOL_SIZE	from 100

default CONT1_PAGER_CAP_THREADPOOL_USE	from y
default CONT1_PAGER_CAP_SPACEPOOL_USE	from y
default CONT1_PAGER_CAP_MAPPOOL_USE	from y
default CONT1_PAGER_CAP_MUTEXPOOL_USE	from y
default CONT1_CAP_MUTEXPOOL_USE	from y

# Use Rules for Generic Capabilities
when CONT1_PAGER_CAP_THREADPOOL_USE == n
	suppress CONT1_PAGER_CAP_THREADPOOL_SIZE
when CONT1_PAGER_CAP_SPACEPOOL_USE == n
	suppress CONT1_PAGER_CAP_SPACEPOOL_SIZE
when CONT1_PAGER_CAP_MAPPOOL_USE == n
	suppress CONT1_PAGER_CAP_MAPPOOL_SIZE
when CONT1_PAGER_CAP_MUTEXPOOL_USE == n
	suppress CONT1_PAGER_CAP_MUTEXPOOL_SIZE

when CONT1_CAP_MUTEXPOOL_USE == n
	suppress CONT1_CAP_MUTEXPOOL_SIZE

when CONT1_PAGER_CAP_IPC_USE == n
	suppress CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT1_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT1_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT1_PAGER_CAP_IPC_TARGET_OTHER_PAGER

when CONT1_CAP_IPC_USE == n
	suppress CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT1_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT1_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT1_CAP_IPC_TARGET_OTHER_PAGER

when CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT1_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_PAGER_CAP_IPC_TARGET

when CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT1_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT1_CAP_IPC_TARGET

choicegroup CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT1_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT1_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT1_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER from y

choicegroup CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT1_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT1_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT1_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER from y

default CONT1_PAGER_CAP_IPC_USE		from y
default CONT1_PAGER_CAP_IRQCTRL_USE	from y
default CONT1_CAP_IPC_USE			from y

default CONT1_PAGER_CAP_IPC_TARGET	from 0
default CONT1_CAP_IPC_TARGET	from 0

# Capability Menus
menu cont1_pager_cap_irqctrl
	CONT1_PAGER_CAP_IRQCTRL_USE

menu cont1_pager_cap_ipc
	CONT1_PAGER_CAP_IPC_USE
	CONT1_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT1_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT1_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT1_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	CONT1_PAGER_CAP_IPC_TARGET%

menu cont1_pager_cap_threadpool
	CONT1_PAGER_CAP_THREADPOOL_USE
	CONT1_PAGER_CAP_THREADPOOL_SIZE%

menu cont1_pager_cap_spacepool
	CONT1_PAGER_CAP_SPACEPOOL_USE
	CONT1_PAGER_CAP_SPACEPOOL_SIZE%

menu cont1_pager_cap_mappool
	CONT1_PAGER_CAP_MAPPOOL_USE
	CONT1_PAGER_CAP_MAPPOOL_SIZE%

menu cont1_pager_cap_mutexpool
	CONT1_PAGER_CAP_MUTEXPOOL_USE
	CONT1_PAGER_CAP_MUTEXPOOL_SIZE%

menu cont1_pager_capability_list
	cont1_pager_cap_threadpool
	cont1_pager_cap_spacepool
	cont1_pager_cap_mutexpool
	cont1_pager_cap_mappool
	cont1_pager_cap_ipc
	cont1_pager_cap_irqctrl
	cont1_pager_cap_custom0
	cont1_pager_cap_custom1
	cont1_pager_cap_custom2
	cont1_pager_cap_custom3

menu cont1_cap_ipc
	CONT1_CAP_IPC_USE
	CONT1_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT1_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT1_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT1_CAP_IPC_TARGET_OTHER_PAGER
	CONT1_CAP_IPC_TARGET%

menu cont1_cap_mutexpool
	CONT1_CAP_MUTEXPOOL_USE
	CONT1_CAP_MUTEXPOOL_SIZE%

menu cont1_capability_list
	cont1_cap_ipc
	cont1_cap_mutexpool

# menu cont1_pager_params

menu container1_options
	CONT1_OPT_NAME$
	cont1_baremetal_params
#	cont1_pager_params
	cont1_linux_pager_params
	cont1_pager_linker_params
	cont1_posix_pager_params
	cont1_physmem_list
	cont1_virtmem_list
	cont1_pager_capability_list
	cont1_capability_list

choices container1_type
	CONT1_TYPE_BAREMETAL
	CONT1_TYPE_POSIX
	CONT1_TYPE_LINUX
        default CONT1_TYPE_BAREMETAL

menu cont1_menu
	container1_type
	container1_options
symbols

CONT2_TYPE_LINUX		'Linux Container'	text
Virtualized linux container.
.

CONT2_TYPE_BAREMETAL	'Baremetal Container'	text
Baremetal containers.
These containers contain various demos describing the usage of various system calls, accessing devices etc.
.

CONT2_TYPE_POSIX		'POSIX Container'	text
Posix container displaying a real posix system running over the hypervisor.
.

CONT2_OPT_NAME		'Project Name'		text
Project name for container2 in this build.
.

CONTAINERS              'Number of containers'		text
Number of containers to be configured.

The maximum number of containers that can be configured is set to 4.
.


CONT2_PAGER_PHYSMEM_REGIONS	'Container 2 Number of Physical Regions'		text
Number of physical memory regions alloted to container2.

A maximum of 4 physical memory regions can be alloted to each container.
.

CONT2_PAGER_PHYS0_START		'Container 2 Pager Physical Region 0 Start Address'	text
Start address of physical memory region 0 for container2.
.

CONT2_PAGER_PHYS0_END		'Container 2 Pager Physical Region 0 End Address'	text
End address of physical memory region 0 for container2.
.

CONT2_PAGER_PHYS1_START		'Container 2 Pager Physical Region 1 Start Address'	text
Start address of physical memory region 1 for container2.
.

CONT2_PAGER_PHYS1_END		'Container 2 Pager Physical Region 1 End Address'	text
End address of physical memory region 1 for container2.
.

CONT2_PAGER_PHYS2_START		'Container 2 Pager Physical Region 2 Start Address'	text
Start address of physical memory region 2 for container2.
.

CONT2_PAGER_PHYS2_END		'Container 2 Pager Physical Region 2 End Address'	text
End address of physical memory region 2 for container2.
.

CONT2_PAGER_PHYS3_START		'Container 2 Pager Physical Region 3 Start Address'	text
Start address of physical memory region 3 for container2.
.

CONT2_PAGER_PHYS3_END		'Container 2 Pager Physical Region 3 End Address'	text
End address of physical memory region 3 for container2.
.

symbols
CONT2_PAGER_VIRTMEM_REGIONS	'Container 2 Number of Virtual Regions'		text
Number of virtual memory regions alloted to container2.

A maximum of 6 virtual memory regions can be alloted to each container.
.

CONT2_PAGER_VIRT0_START	'Container 2 Pager Virtual Region 0 Start Address'		text
Start address of virtual memory region 0 for container2.
.

CONT2_PAGER_VIRT0_END	'Container 2 Pager Virtual Region 0 End Address'			text
End address of virtual memory region 0 for container2.
.

CONT2_PAGER_VIRT1_START	'Container 2 Pager Virtual Region 1 Start Address'		text
Start address of virtual memory region 1 for container2.
.

CONT2_PAGER_VIRT1_END	'Container 2 Pager Virtual Region 1 End Address'			text
End address of virtual memory region 1 for container2.
.

CONT2_PAGER_VIRT2_START	'Container 2 Pager Virtual Region 2 Start Address'		text
Start address of virtual memory region 2 for container2.
.

CONT2_PAGER_VIRT2_END	'Container 2 Pager Virtual Region 2 End Address'			text
End address of virtual memory region 2 for container2.
.

CONT2_PAGER_VIRT3_START	'Container 2 Pager Virtual Region 3 Start Address'		text
Start address of virtual memory region 3 for container2.
.

CONT2_PAGER_VIRT3_END	'Container 2 Pager Virtual Region 3 End Address'			text
End address of virtual memory region 3 for container2.
.

CONT2_PAGER_VIRT4_START	'Container 2 Pager Virtual Region 4 Start Address'		text
Start address of virtual memory region 4 for container2.
.

CONT2_PAGER_VIRT4_END	'Container 2 Pager Virtual Region 4 End Address'			text
End address of virtual memory region 4 for container2.
.

CONT2_PAGER_VIRT5_START	'Container 2 Pager Virtual Region 5 Start Address'		text
Start address of virtual memory region 5 for container2.
.

CONT2_PAGER_VIRT5_END	'Container 2 Pager Virtual Region 5 End Address'			text
End address of virtual memory region 5 for container2.
.

# FIXME: We dont need to pass PAGER_LMA and PAGER_VMA to config.h now
# as we are using them just to derive other symbols, in this file only
CONT2_PAGER_LMA		'Container 2 Pager LMA'				text
Physical memory address for loading the pager of container2.
.

CONT2_PAGER_VMA		'Container 2 Pager VMA'				text
Virtual memory address for loading the pager of container2.
.

CONT2_PAGER_SHM_START	'Container 2 Shared Mappings Region Start'		text
Start of virtual memory region to be used for shared mappings for container2.
.

CONT2_PAGER_SHM_END	'Container 2 Shared Mappings Region End'		text
End of virtual memory region to be used for shared mappings for container2.
.

CONT2_PAGER_TASK_START	'Container 2 Task Address Space Region Start'	text
Start of virtual memory region to be used for address spaces generation
for the new tasks created in container2.
.

CONT2_PAGER_TASK_END	'Container 2 Task Address Space Region End'	text
End of virtual memory region to be used for address spaces generation
for the new tasks created in container2.
.

CONT2_PAGER_UTCB_START	'Container 2 UTCB Mappings Region Start'		text
Start of virtual memory region to be used for allocating utcbs of threads in container2.
.

CONT2_PAGER_UTCB_END	'Container 2 UTCB Mappings Region End'		text
End of virtual memory region to be used for allocating utcbs of threads in container2.
.

CONT2_LINUX_ZRELADDR       'Container 2 Linux ZRELADDR Parameter'		text
ZRELADDR parameter of linux kernel.

This refers to the physical memory address where uncompressed linux kernel will be loaded.
This should be within the physical memory regions assigned to linux container.
.

CONT2_LINUX_PAGE_OFFSET	'Container 2 Linux PAGE_OFFSET Parameter'		text
PAGE_OFFSET parameter of linux kernel.

This refers to the virtual memory address from where the virtual memory region
of linux kernel starts.
This should be within the virtual memory regions assigned to linux container.
.

CONT2_LINUX_PHYS_OFFSET	'Container 2 Linux PHYS_OFFSET Parameter'		text
PHYS_OFFSET parameter of linux kernel.

This refers to the beginning address of physical memory region avaialable to linux container/kernel.
.

CONT2_LINUX_ROOTFS_ADDRESS	'Container 2 Linux ROOTFS Address'			text
Virtual memory address where root filesystem, to be used by linux kernel, will be located.

This should be within the range of virtual memory regions assigned to linux container/kernel.
.

default CONT2_PAGER_LMA	 	from CONT2_PAGER_PHYS0_START
default CONT2_PAGER_VMA	 	from CONT2_PAGER_VIRT0_START
default CONT2_PAGER_SHM_START	from CONT2_PAGER_VIRT1_START
default CONT2_PAGER_SHM_END	from CONT2_PAGER_VIRT1_END
default CONT2_PAGER_TASK_START	from CONT2_PAGER_VIRT2_START
default CONT2_PAGER_TASK_END	from CONT2_PAGER_VIRT2_END
default CONT2_PAGER_UTCB_START	from CONT2_PAGER_VIRT3_START
default CONT2_PAGER_UTCB_END	from CONT2_PAGER_VIRT3_END
default CONT2_LINUX_ZRELADDR	from (CONT2_LINUX_PHYS_OFFSET + 0x8000)
default CONT2_LINUX_PAGE_OFFSET 	from CONT2_PAGER_VIRT0_START
default CONT2_LINUX_PHYS_OFFSET 	from CONT2_PAGER_PHYS0_START
default CONT2_LINUX_ROOTFS_ADDRESS	from (CONT2_LINUX_PHYS_OFFSET + 0x500000)

default CONT2_PAGER_VIRTMEM_REGIONS from (CONT2_TYPE_POSIX==y ? 4 : 1)
default CONT2_PAGER_PHYSMEM_REGIONS from 1

# Define limits on virtual and physical memory regions of a _single_ container 0. Too much code!
when CONT2_PAGER_VIRTMEM_REGIONS < 2 suppress CONT2_PAGER_VIRT1_START CONT2_PAGER_VIRT1_END
when CONT2_PAGER_VIRTMEM_REGIONS < 2 suppress CONT2_PAGER_VIRT2_START CONT2_PAGER_VIRT2_END
when CONT2_PAGER_VIRTMEM_REGIONS < 2 suppress CONT2_PAGER_VIRT3_START CONT2_PAGER_VIRT3_END
when CONT2_PAGER_VIRTMEM_REGIONS < 2 suppress CONT2_PAGER_VIRT4_START CONT2_PAGER_VIRT4_END
when CONT2_PAGER_VIRTMEM_REGIONS < 2 suppress CONT2_PAGER_VIRT5_START CONT2_PAGER_VIRT5_END

when CONT2_PAGER_VIRTMEM_REGIONS < 3 suppress CONT2_PAGER_VIRT2_START CONT2_PAGER_VIRT2_END
when CONT2_PAGER_VIRTMEM_REGIONS < 3 suppress CONT2_PAGER_VIRT3_START CONT2_PAGER_VIRT3_END
when CONT2_PAGER_VIRTMEM_REGIONS < 3 suppress CONT2_PAGER_VIRT4_START CONT2_PAGER_VIRT4_END
when CONT2_PAGER_VIRTMEM_REGIONS < 3 suppress CONT2_PAGER_VIRT5_START CONT2_PAGER_VIRT5_END

when CONT2_PAGER_VIRTMEM_REGIONS < 4 suppress CONT2_PAGER_VIRT3_START CONT2_PAGER_VIRT3_END
when CONT2_PAGER_VIRTMEM_REGIONS < 4 suppress CONT2_PAGER_VIRT4_START CONT2_PAGER_VIRT4_END
when CONT2_PAGER_VIRTMEM_REGIONS < 4 suppress CONT2_PAGER_VIRT5_START CONT2_PAGER_VIRT5_END

when CONT2_PAGER_VIRTMEM_REGIONS < 5 suppress CONT2_PAGER_VIRT4_START CONT2_PAGER_VIRT4_END
when CONT2_PAGER_VIRTMEM_REGIONS < 5 suppress CONT2_PAGER_VIRT5_START CONT2_PAGER_VIRT5_END

when CONT2_PAGER_VIRTMEM_REGIONS < 6 suppress CONT2_PAGER_VIRT5_START CONT2_PAGER_VIRT5_END


when CONT2_PAGER_PHYSMEM_REGIONS < 2 suppress CONT2_PAGER_PHYS1_START CONT2_PAGER_PHYS1_END
when CONT2_PAGER_PHYSMEM_REGIONS < 2 suppress CONT2_PAGER_PHYS2_START CONT2_PAGER_PHYS2_END
when CONT2_PAGER_PHYSMEM_REGIONS < 2 suppress CONT2_PAGER_PHYS3_START CONT2_PAGER_PHYS3_END

when CONT2_PAGER_PHYSMEM_REGIONS < 3 suppress CONT2_PAGER_PHYS2_START CONT2_PAGER_PHYS2_END
when CONT2_PAGER_PHYSMEM_REGIONS < 3 suppress CONT2_PAGER_PHYS3_START CONT2_PAGER_PHYS3_END

when CONT2_PAGER_PHYSMEM_REGIONS < 4 suppress CONT2_PAGER_PHYS3_START CONT2_PAGER_PHYS3_END

# We assume kernel uses 0x0 - 0x40000 physical RAM.
# Physical Regions for containers should start after kernel.
require CONT2_PAGER_PHYS0_START >= 0x40000
require CONT2_PAGER_PHYS1_START >= 0x40000
require CONT2_PAGER_PHYS2_START >= 0x40000
require CONT2_PAGER_PHYS3_START >= 0x40000

# TODO: We can add check for end address of physical region to be
# less than RAM SIZE, need to find out RAM SIZE?

# Rules for Linux kernel parameters
require CONT2_LINUX_ZRELADDR > CONT2_LINUX_PHYS_OFFSET + 0x8000

# TODO: Do we want to check if PAGER_LMA/VMA lies in allocated memory regions
default CONT2_PAGER_PHYS0_START from ((2 == 0 ? 0x100000 : (0x100000 + 2 * 0x1000000)) + RAM_BASE_PLAT)
default	CONT2_PAGER_PHYS0_END	from (CONT2_PAGER_PHYS0_START + 0xD00000)
default CONT2_PAGER_PHYS1_START	from CONT2_PAGER_PHYS0_END
default CONT2_PAGER_PHYS1_END	from (CONT2_PAGER_PHYS1_START + 0x100000)
default CONT2_PAGER_PHYS2_START	from CONT2_PAGER_PHYS1_END
default CONT2_PAGER_PHYS2_END	from (CONT2_PAGER_PHYS2_START + 0x100000)
default CONT2_PAGER_PHYS3_START	from CONT2_PAGER_PHYS2_END
default CONT2_PAGER_PHYS3_END	from (CONT2_PAGER_PHYS3_START + 0x100000)

default CONT2_PAGER_VIRT0_START	from (2 == 0 ? 0xa0000000 : (0xa0000000 + 2 * 0x10000000))
default CONT2_PAGER_VIRT0_END	from (CONT2_PAGER_VIRT0_START + 0x10000000)
default CONT2_PAGER_VIRT1_START	from (2 == 0 ? 0x80000000 : (0x80000000 + 2 * 0x8000000))
default CONT2_PAGER_VIRT1_END	from (CONT2_PAGER_VIRT1_START + 0x8000000)
default CONT2_PAGER_VIRT2_START	from (2 == 0 ? 0x40000000 : (0x40000000 + 2 * 0x10000000))
default CONT2_PAGER_VIRT2_END	from (CONT2_PAGER_VIRT2_START + 0x10000000)
default CONT2_PAGER_VIRT3_START	from (2 == 0 ? 0xf8100000 : (0xf8100000 + 2 * 0x100000))
default CONT2_PAGER_VIRT3_END	from (CONT2_PAGER_VIRT3_START + 0x100000)
default CONT2_PAGER_VIRT4_START	from (2 == 0 ? 0x10000000 : (0x10000000 + 2 * 0x10000000))
default CONT2_PAGER_VIRT4_END	from (CONT2_PAGER_VIRT4_START + 0x10000000)
default CONT2_PAGER_VIRT5_START	from 0xe0000000
default CONT2_PAGER_VIRT5_END	from 0xf0000000

default CONT2_OPT_NAME from
(CONT2_TYPE_LINUX==y) ? "linux2" :
((CONT2_TYPE_POSIX==y) ? "posix2" :
((CONT2_BAREMETAL_PROJ_HELLO_WORLD==y) ? "hello_world2" :
((CONT2_BAREMETAL_PROJ_THREADS_DEMO==y) ? "thread_demo2" :
((CONT2_BAREMETAL_PROJ_TEST_SUITE==y) ? "test_suite2" :
((CONT2_BAREMETAL_PROJ_UART_SERVICE==y) ? "uart_service2" :
((CONT2_BAREMETAL_PROJ_KMI_SERVICE==y) ? "kmi_service2" :
((CONT2_BAREMETAL_PROJ_MUTEX_DEMO==y) ? "mutex_demo2" :
((CONT2_BAREMETAL_PROJ_IPC_DEMO==y) ? "ipc_demo2" :
((CONT2_BAREMETAL_PROJ_TIMER_SERVICE==y) ? "timer_service2" : "empty2")))))))))

when CONT2_TYPE_LINUX==y suppress cont2_pager_linker_params
unless CONT2_TYPE_POSIX==y suppress cont2_posix_pager_params
unless CONT2_TYPE_LINUX==y suppress cont2_linux_pager_params
unless CONT2_TYPE_BAREMETAL==y suppress cont2_baremetal_params

# derive symbols, for cinfo.c, depending on the type of container selected
derive CONT2_PAGER_LOAD_ADDR from (CONT2_TYPE_LINUX==y) ? CONT2_LINUX_PHYS_OFFSET : CONT2_PAGER_LMA
derive CONT2_PAGER_VIRT_ADDR from (CONT2_TYPE_LINUX==y) ? CONT2_LINUX_PAGE_OFFSET : CONT2_PAGER_VMA
derive CONT2_START_PC_ADDR from (CONT2_TYPE_LINUX != y) ? CONT2_PAGER_VMA : (CONT2_LINUX_PAGE_OFFSET + CONT2_LINUX_ZRELADDR - CONT2_LINUX_PHYS_OFFSET)

symbols
cont2_menu		'Container 2 Parameters'					text
List of parameters associated with container2.

All parameters are provided with default values, appropriate for defualt configurations of
various containers.
.

cont2_physmem_list	'Container 2 Pager Physical Memory Regions (Capabilities)'	text
List of physical memory regions to be used by container2.
.

cont2_virtmem_list	'Container 2 Pager Virtual Memory Regions (Capabilities)'	text
List of virtual memory regions to be used by container2.
.

container2_type	'Container 2 Type'						text
Container type.
.

#cont2_pager_params	'Container 2 Pager Parameters'			text
#Configuration parameters associated with container2 pager.
#.

container2_options	'Container 2 Options'					text
Configuration parameters associated with container2.
.

cont2_linux_pager_params	'Container 2 Linux Pager Parameters'		text
Configuration parameters associated with pager of container2.
.

cont2_pager_linker_params	'Container 2 Pager Linker Parameters'		text
Pager's linker parameters. These allow shifting the pager image in physical and virtual
address spaces.

For correct functioning, the LMA parameter should match with one of the
defined physical memory capabilities.

The VMA parameter should match with one of the defined virtual memory
capabilities.
.

cont2_posix_pager_params	'Container 2 POSIX Pager Parameters'		text
Configuration parameters associated with pager of container2.
.

cont2_baremetal_params		'Baremetal Project Type'			text
Select the type of sources to include in this baremetal container
.

CONT2_BAREMETAL_PROJ_EMPTY		'Empty Project'					text
Empty container.

This includes the bare minimum sources required to build a container.
.

CONT2_BAREMETAL_PROJ_HELLO_WORLD	'Hello World'					text
Hello world container

This includes a main.c with a hello world message printed on the console.
.

CONT2_BAREMETAL_PROJ_THREADS_DEMO	'Thread Library Demo'				text
Baremetal container demonstrating usage of libl4 thread library and associated API.
.

CONT2_BAREMETAL_PROJ_TEST_SUITE   	'Microkernel Tests'				text
Baremetal container demonstrating some API usage cases and tests.
.

CONT2_BAREMETAL_PROJ_UART_SERVICE	'UART Service'					text
Baremetal container demonstrating usage of uart devices.
.

CONT2_BAREMETAL_PROJ_TIMER_SERVICE 'Timer Service'					text
Baremetal container displaying usage of timer devices.
.

CONT2_BAREMETAL_PROJ_KMI_SERVICE 	'Keyboard Mouse Service'			text
Baremetal container displaying usage of mouse and keyboard devices.
.

CONT2_BAREMETAL_PROJ_MUTEX_DEMO	'Mutex Demo'					text
Baremetal container displaying usage of mutexes.
.

CONT2_BAREMETAL_PROJ_IPC_DEMO	'IPC Demo'					text
Baremetal container displaying usage of ipc calls.
.


choices cont2_baremetal_params
	CONT2_BAREMETAL_PROJ_EMPTY
	CONT2_BAREMETAL_PROJ_HELLO_WORLD
	CONT2_BAREMETAL_PROJ_THREADS_DEMO
	CONT2_BAREMETAL_PROJ_TEST_SUITE
	CONT2_BAREMETAL_PROJ_UART_SERVICE
	CONT2_BAREMETAL_PROJ_TIMER_SERVICE
	CONT2_BAREMETAL_PROJ_KMI_SERVICE
	CONT2_BAREMETAL_PROJ_MUTEX_DEMO
	CONT2_BAREMETAL_PROJ_IPC_DEMO
	default CONT2_BAREMETAL_PROJ_EMPTY

menu cont2_pager_linker_params
	CONT2_PAGER_LMA@
	CONT2_PAGER_VMA@

menu cont2_posix_pager_params
	CONT2_PAGER_SHM_START@
	CONT2_PAGER_SHM_END@
	CONT2_PAGER_TASK_START@
	CONT2_PAGER_TASK_END@
	CONT2_PAGER_UTCB_START@
	CONT2_PAGER_UTCB_END@

menu cont2_linux_pager_params
	CONT2_LINUX_PHYS_OFFSET@
	CONT2_LINUX_ZRELADDR@
	CONT2_LINUX_ROOTFS_ADDRESS@
	CONT2_LINUX_PAGE_OFFSET@

menu cont2_virtmem_list
	CONT2_PAGER_VIRTMEM_REGIONS%
	CONT2_PAGER_VIRT0_START@
	CONT2_PAGER_VIRT0_END@
	CONT2_PAGER_VIRT1_START@
	CONT2_PAGER_VIRT1_END@
	CONT2_PAGER_VIRT2_START@
	CONT2_PAGER_VIRT2_END@
	CONT2_PAGER_VIRT3_START@
	CONT2_PAGER_VIRT3_END@
	CONT2_PAGER_VIRT4_START@
	CONT2_PAGER_VIRT4_END@
	CONT2_PAGER_VIRT5_START@
	CONT2_PAGER_VIRT5_END@

menu cont2_physmem_list
	CONT2_PAGER_PHYSMEM_REGIONS%
	CONT2_PAGER_PHYS0_START@
	CONT2_PAGER_PHYS0_END@
	CONT2_PAGER_PHYS1_START@
	CONT2_PAGER_PHYS1_END@
	CONT2_PAGER_PHYS2_START@
	CONT2_PAGER_PHYS2_END@
	CONT2_PAGER_PHYS3_START@
	CONT2_PAGER_PHYS3_END@

#
# Settings for Custom Capabilities
#
choices cont2_pager_cap_custom0_type
	CONT2_PAGER_CAP_CUSTOM0_IPC_TYPE
	default CONT2_PAGER_CAP_CUSTOM0_IPC_TYPE
choices cont2_pager_cap_custom1_type
	CONT2_PAGER_CAP_CUSTOM1_IPC_TYPE
	default CONT2_PAGER_CAP_CUSTOM1_IPC_TYPE
choices cont2_pager_cap_custom2_type
	CONT2_PAGER_CAP_CUSTOM2_IPC_TYPE
	default CONT2_PAGER_CAP_CUSTOM2_IPC_TYPE
choices cont2_pager_cap_custom3_type
	CONT2_PAGER_CAP_CUSTOM3_IPC_TYPE
	default CONT2_PAGER_CAP_CUSTOM3_IPC_TYPE

default CONT2_PAGER_CAP_CUSTOM0_USE	from n
default CONT2_PAGER_CAP_CUSTOM1_USE	from n
default CONT2_PAGER_CAP_CUSTOM2_USE	from n
default CONT2_PAGER_CAP_CUSTOM3_USE	from n

menu cont2_pager_cap_custom0
	CONT2_PAGER_CAP_CUSTOM0_USE
	cont2_pager_cap_custom0_type
	CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	CONT2_PAGER_CAP_CUSTOM0_TARGET%

menu cont2_pager_cap_custom1
	CONT2_PAGER_CAP_CUSTOM1_USE
	cont2_pager_cap_custom1_type
	CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	CONT2_PAGER_CAP_CUSTOM1_TARGET%

menu cont2_pager_cap_custom2
	CONT2_PAGER_CAP_CUSTOM2_USE
	cont2_pager_cap_custom2_type
	CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	CONT2_PAGER_CAP_CUSTOM2_TARGET%

menu cont2_pager_cap_custom3
	CONT2_PAGER_CAP_CUSTOM3_USE
	cont2_pager_cap_custom3_type
	CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	CONT2_PAGER_CAP_CUSTOM3_TARGET%

choicegroup CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	    CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	    default CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER from y

choicegroup CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	    CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	    default CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER from y

choicegroup CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	    CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	    default CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER from y

choicegroup CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	    CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	    CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	    default CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER from y

when CONT2_PAGER_CAP_CUSTOM0_USE == n
	suppress cont2_pager_cap_custom0_type
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET

when CONT2_PAGER_CAP_CUSTOM1_USE == n
	suppress cont2_pager_cap_custom1_type
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET

when CONT2_PAGER_CAP_CUSTOM2_USE == n
	suppress cont2_pager_cap_custom2_type
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET

when CONT2_PAGER_CAP_CUSTOM3_USE == n
	suppress cont2_pager_cap_custom3_type
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET

when CONT2_PAGER_CAP_CUSTOM0_IPC_TYPE == n
	suppress CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM0_TARGET

when CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER or
     CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_PAGER_CAP_CUSTOM0_TARGET

when CONT2_PAGER_CAP_CUSTOM1_IPC_TYPE == n
	suppress CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM1_TARGET

when CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER or
     CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_PAGER_CAP_CUSTOM1_TARGET

when CONT2_PAGER_CAP_CUSTOM2_IPC_TYPE == n
	suppress CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM2_TARGET

when CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER or
     CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_PAGER_CAP_CUSTOM2_TARGET

when CONT2_PAGER_CAP_CUSTOM3_IPC_TYPE == n
	suppress CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT2_PAGER_CAP_CUSTOM3_TARGET

when CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER or
     CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_PAGER_CAP_CUSTOM3_TARGET

default CONT2_PAGER_CAP_CUSTOM0_TARGET		from 0
default CONT2_PAGER_CAP_CUSTOM1_TARGET		from 0
default CONT2_PAGER_CAP_CUSTOM2_TARGET		from 0
default CONT2_PAGER_CAP_CUSTOM3_TARGET		from 0

# Symbols for Custom Capabilities
symbols

#
# CUSTOM CAPABILITY 0
#
CONT2_PAGER_CAP_CUSTOM0_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont2_pager_cap_custom0_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT2_PAGER_CAP_CUSTOM0_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT2_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT2_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT2_PAGER_CAP_CUSTOM0_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 1
#
CONT2_PAGER_CAP_CUSTOM1_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont2_pager_cap_custom1_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT2_PAGER_CAP_CUSTOM1_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT2_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT2_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT2_PAGER_CAP_CUSTOM1_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.


#
# CUSTOM CAPABILITY 2
#
CONT2_PAGER_CAP_CUSTOM2_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont2_pager_cap_custom2_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT2_PAGER_CAP_CUSTOM2_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT2_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT2_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT2_PAGER_CAP_CUSTOM2_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 3
#
CONT2_PAGER_CAP_CUSTOM3_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont2_pager_cap_custom3_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT2_PAGER_CAP_CUSTOM3_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT2_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT2_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT2_PAGER_CAP_CUSTOM3_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

# Symbols for Generic Capabilities
symbols
CONT2_PAGER_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER 		'Capability Targets Current Container'		text
Capability targets current container, including all spaces and threads present inside this container.
.

CONT2_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 		'Capability Targets Current Pager`s Space'	text
Capability targets space associated with pager of this container.
.

CONT2_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER		'Capability Targets Another Container'		text
Capability targets pager of another container.
.

CONT2_PAGER_CAP_IPC_TARGET_OTHER_PAGER			'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container.
.

CONT2_PAGER_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

CONT2_PAGER_CAP_IRQCTRL_USE				'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT2_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT2_CAP_IPC_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT2_CAP_IPC_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT2_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

symbols
CONT2_PAGER_CAP_THREADPOOL_SIZE	'Number of Threads'				text
Total number of threads in this pool.
.

CONT2_PAGER_CAP_SPACEPOOL_SIZE	'Number of Address Spaces'			text
Total number of spaces in this pool.
.

CONT2_PAGER_CAP_MAPPOOL_SIZE	'Number of PMD Mappings'			text
Total number of pmds(E.g. Middle-level Page Tables) in this pool.
.

CONT2_PAGER_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT2_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT2_PAGER_CAP_THREADPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_PAGER_CAP_SPACEPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_PAGER_CAP_MAPPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_PAGER_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT2_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

cont2_pager_cap_threadpool	'Container 2 Thread Pool Capability'		text
It controls the number of threads allowed to be created in the container.
.

cont2_pager_cap_spacepool	'Container 2 Space Pool Capability'		text
It controls the number of spaces allowed to be created in the container.
.

cont2_pager_cap_mutexpool	'Container 2 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont2_cap_mutexpool	'Container 2 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont2_pager_cap_mappool		'Container 2 Map Pool Capability'			text
It defines the mapping pools/caches for various kinds of structures used in the container.
.


cont2_pager_cap_ipc		'Container 2 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont2_cap_ipc		'Container 2 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont2_pager_cap_irqctrl		'Container 2 IRQ Control Capability'		text
Capability associated with irq control features and permissions.
.

cont2_pager_cap_custom0 		'Container 2 Custom Capability 0 Parameters'	text
Custom capability.
.

cont2_pager_cap_custom1 		'Container 2 Custom Capability 1 Parameters'	text
Custom capability.
.

cont2_pager_cap_custom2 		'Container 2 Custom Capability 2 Parameters'	text
Custom capability.
.

cont2_pager_cap_custom3		'Container 2 Custom Capability 3 Parameters'	text
Custom capability.
.

cont2_pager_capability_list	'Container 2 Pager Capabilities'			text
List of capabilities associated with Container2's Pager task
.

cont2_capability_list	'Container 2 Global Capabilities'		text
List of capabilities globally associated with all tasks inside Container2.

These capabilities can be used by tasks inside Container2.
.


default CONT2_PAGER_CAP_THREADPOOL_SIZE	from 64
default CONT2_PAGER_CAP_SPACEPOOL_SIZE	from 64
default CONT2_PAGER_CAP_MAPPOOL_SIZE	from 800
default CONT2_PAGER_CAP_MUTEXPOOL_SIZE	from 100
default CONT2_CAP_MUTEXPOOL_SIZE	from 100

default CONT2_PAGER_CAP_THREADPOOL_USE	from y
default CONT2_PAGER_CAP_SPACEPOOL_USE	from y
default CONT2_PAGER_CAP_MAPPOOL_USE	from y
default CONT2_PAGER_CAP_MUTEXPOOL_USE	from y
default CONT2_CAP_MUTEXPOOL_USE	from y

# Use Rules for Generic Capabilities
when CONT2_PAGER_CAP_THREADPOOL_USE == n
	suppress CONT2_PAGER_CAP_THREADPOOL_SIZE
when CONT2_PAGER_CAP_SPACEPOOL_USE == n
	suppress CONT2_PAGER_CAP_SPACEPOOL_SIZE
when CONT2_PAGER_CAP_MAPPOOL_USE == n
	suppress CONT2_PAGER_CAP_MAPPOOL_SIZE
when CONT2_PAGER_CAP_MUTEXPOOL_USE == n
	suppress CONT2_PAGER_CAP_MUTEXPOOL_SIZE

when CONT2_CAP_MUTEXPOOL_USE == n
	suppress CONT2_CAP_MUTEXPOOL_SIZE

when CONT2_PAGER_CAP_IPC_USE == n
	suppress CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT2_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT2_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT2_PAGER_CAP_IPC_TARGET_OTHER_PAGER

when CONT2_CAP_IPC_USE == n
	suppress CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT2_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT2_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT2_CAP_IPC_TARGET_OTHER_PAGER

when CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT2_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_PAGER_CAP_IPC_TARGET

when CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT2_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT2_CAP_IPC_TARGET

choicegroup CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT2_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT2_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT2_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER from y

choicegroup CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT2_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT2_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT2_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER from y

default CONT2_PAGER_CAP_IPC_USE		from y
default CONT2_PAGER_CAP_IRQCTRL_USE	from y
default CONT2_CAP_IPC_USE			from y

default CONT2_PAGER_CAP_IPC_TARGET	from 0
default CONT2_CAP_IPC_TARGET	from 0

# Capability Menus
menu cont2_pager_cap_irqctrl
	CONT2_PAGER_CAP_IRQCTRL_USE

menu cont2_pager_cap_ipc
	CONT2_PAGER_CAP_IPC_USE
	CONT2_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT2_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT2_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT2_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	CONT2_PAGER_CAP_IPC_TARGET%

menu cont2_pager_cap_threadpool
	CONT2_PAGER_CAP_THREADPOOL_USE
	CONT2_PAGER_CAP_THREADPOOL_SIZE%

menu cont2_pager_cap_spacepool
	CONT2_PAGER_CAP_SPACEPOOL_USE
	CONT2_PAGER_CAP_SPACEPOOL_SIZE%

menu cont2_pager_cap_mappool
	CONT2_PAGER_CAP_MAPPOOL_USE
	CONT2_PAGER_CAP_MAPPOOL_SIZE%

menu cont2_pager_cap_mutexpool
	CONT2_PAGER_CAP_MUTEXPOOL_USE
	CONT2_PAGER_CAP_MUTEXPOOL_SIZE%

menu cont2_pager_capability_list
	cont2_pager_cap_threadpool
	cont2_pager_cap_spacepool
	cont2_pager_cap_mutexpool
	cont2_pager_cap_mappool
	cont2_pager_cap_ipc
	cont2_pager_cap_irqctrl
	cont2_pager_cap_custom0
	cont2_pager_cap_custom1
	cont2_pager_cap_custom2
	cont2_pager_cap_custom3

menu cont2_cap_ipc
	CONT2_CAP_IPC_USE
	CONT2_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT2_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT2_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT2_CAP_IPC_TARGET_OTHER_PAGER
	CONT2_CAP_IPC_TARGET%

menu cont2_cap_mutexpool
	CONT2_CAP_MUTEXPOOL_USE
	CONT2_CAP_MUTEXPOOL_SIZE%

menu cont2_capability_list
	cont2_cap_ipc
	cont2_cap_mutexpool

# menu cont2_pager_params

menu container2_options
	CONT2_OPT_NAME$
	cont2_baremetal_params
#	cont2_pager_params
	cont2_linux_pager_params
	cont2_pager_linker_params
	cont2_posix_pager_params
	cont2_physmem_list
	cont2_virtmem_list
	cont2_pager_capability_list
	cont2_capability_list

choices container2_type
	CONT2_TYPE_BAREMETAL
	CONT2_TYPE_POSIX
	CONT2_TYPE_LINUX
        default CONT2_TYPE_BAREMETAL

menu cont2_menu
	container2_type
	container2_options
symbols

CONT3_TYPE_LINUX		'Linux Container'	text
Virtualized linux container.
.

CONT3_TYPE_BAREMETAL	'Baremetal Container'	text
Baremetal containers.
These containers contain various demos describing the usage of various system calls, accessing devices etc.
.

CONT3_TYPE_POSIX		'POSIX Container'	text
Posix container displaying a real posix system running over the hypervisor.
.

CONT3_OPT_NAME		'Project Name'		text
Project name for container3 in this build.
.

CONTAINERS              'Number of containers'		text
Number of containers to be configured.

The maximum number of containers that can be configured is set to 4.
.


CONT3_PAGER_PHYSMEM_REGIONS	'Container 3 Number of Physical Regions'		text
Number of physical memory regions alloted to container3.

A maximum of 4 physical memory regions can be alloted to each container.
.

CONT3_PAGER_PHYS0_START		'Container 3 Pager Physical Region 0 Start Address'	text
Start address of physical memory region 0 for container3.
.

CONT3_PAGER_PHYS0_END		'Container 3 Pager Physical Region 0 End Address'	text
End address of physical memory region 0 for container3.
.

CONT3_PAGER_PHYS1_START		'Container 3 Pager Physical Region 1 Start Address'	text
Start address of physical memory region 1 for container3.
.

CONT3_PAGER_PHYS1_END		'Container 3 Pager Physical Region 1 End Address'	text
End address of physical memory region 1 for container3.
.

CONT3_PAGER_PHYS2_START		'Container 3 Pager Physical Region 2 Start Address'	text
Start address of physical memory region 2 for container3.
.

CONT3_PAGER_PHYS2_END		'Container 3 Pager Physical Region 2 End Address'	text
End address of physical memory region 2 for container3.
.

CONT3_PAGER_PHYS3_START		'Container 3 Pager Physical Region 3 Start Address'	text
Start address of physical memory region 3 for container3.
.

CONT3_PAGER_PHYS3_END		'Container 3 Pager Physical Region 3 End Address'	text
End address of physical memory region 3 for container3.
.

symbols
CONT3_PAGER_VIRTMEM_REGIONS	'Container 3 Number of Virtual Regions'		text
Number of virtual memory regions alloted to container3.

A maximum of 6 virtual memory regions can be alloted to each container.
.

CONT3_PAGER_VIRT0_START	'Container 3 Pager Virtual Region 0 Start Address'		text
Start address of virtual memory region 0 for container3.
.

CONT3_PAGER_VIRT0_END	'Container 3 Pager Virtual Region 0 End Address'			text
End address of virtual memory region 0 for container3.
.

CONT3_PAGER_VIRT1_START	'Container 3 Pager Virtual Region 1 Start Address'		text
Start address of virtual memory region 1 for container3.
.

CONT3_PAGER_VIRT1_END	'Container 3 Pager Virtual Region 1 End Address'			text
End address of virtual memory region 1 for container3.
.

CONT3_PAGER_VIRT2_START	'Container 3 Pager Virtual Region 2 Start Address'		text
Start address of virtual memory region 2 for container3.
.

CONT3_PAGER_VIRT2_END	'Container 3 Pager Virtual Region 2 End Address'			text
End address of virtual memory region 2 for container3.
.

CONT3_PAGER_VIRT3_START	'Container 3 Pager Virtual Region 3 Start Address'		text
Start address of virtual memory region 3 for container3.
.

CONT3_PAGER_VIRT3_END	'Container 3 Pager Virtual Region 3 End Address'			text
End address of virtual memory region 3 for container3.
.

CONT3_PAGER_VIRT4_START	'Container 3 Pager Virtual Region 4 Start Address'		text
Start address of virtual memory region 4 for container3.
.

CONT3_PAGER_VIRT4_END	'Container 3 Pager Virtual Region 4 End Address'			text
End address of virtual memory region 4 for container3.
.

CONT3_PAGER_VIRT5_START	'Container 3 Pager Virtual Region 5 Start Address'		text
Start address of virtual memory region 5 for container3.
.

CONT3_PAGER_VIRT5_END	'Container 3 Pager Virtual Region 5 End Address'			text
End address of virtual memory region 5 for container3.
.

# FIXME: We dont need to pass PAGER_LMA and PAGER_VMA to config.h now
# as we are using them just to derive other symbols, in this file only
CONT3_PAGER_LMA		'Container 3 Pager LMA'				text
Physical memory address for loading the pager of container3.
.

CONT3_PAGER_VMA		'Container 3 Pager VMA'				text
Virtual memory address for loading the pager of container3.
.

CONT3_PAGER_SHM_START	'Container 3 Shared Mappings Region Start'		text
Start of virtual memory region to be used for shared mappings for container3.
.

CONT3_PAGER_SHM_END	'Container 3 Shared Mappings Region End'		text
End of virtual memory region to be used for shared mappings for container3.
.

CONT3_PAGER_TASK_START	'Container 3 Task Address Space Region Start'	text
Start of virtual memory region to be used for address spaces generation
for the new tasks created in container3.
.

CONT3_PAGER_TASK_END	'Container 3 Task Address Space Region End'	text
End of virtual memory region to be used for address spaces generation
for the new tasks created in container3.
.

CONT3_PAGER_UTCB_START	'Container 3 UTCB Mappings Region Start'		text
Start of virtual memory region to be used for allocating utcbs of threads in container3.
.

CONT3_PAGER_UTCB_END	'Container 3 UTCB Mappings Region End'		text
End of virtual memory region to be used for allocating utcbs of threads in container3.
.

CONT3_LINUX_ZRELADDR       'Container 3 Linux ZRELADDR Parameter'		text
ZRELADDR parameter of linux kernel.

This refers to the physical memory address where uncompressed linux kernel will be loaded.
This should be within the physical memory regions assigned to linux container.
.

CONT3_LINUX_PAGE_OFFSET	'Container 3 Linux PAGE_OFFSET Parameter'		text
PAGE_OFFSET parameter of linux kernel.

This refers to the virtual memory address from where the virtual memory region
of linux kernel starts.
This should be within the virtual memory regions assigned to linux container.
.

CONT3_LINUX_PHYS_OFFSET	'Container 3 Linux PHYS_OFFSET Parameter'		text
PHYS_OFFSET parameter of linux kernel.

This refers to the beginning address of physical memory region avaialable to linux container/kernel.
.

CONT3_LINUX_ROOTFS_ADDRESS	'Container 3 Linux ROOTFS Address'			text
Virtual memory address where root filesystem, to be used by linux kernel, will be located.

This should be within the range of virtual memory regions assigned to linux container/kernel.
.

default CONT3_PAGER_LMA	 	from CONT3_PAGER_PHYS0_START
default CONT3_PAGER_VMA	 	from CONT3_PAGER_VIRT0_START
default CONT3_PAGER_SHM_START	from CONT3_PAGER_VIRT1_START
default CONT3_PAGER_SHM_END	from CONT3_PAGER_VIRT1_END
default CONT3_PAGER_TASK_START	from CONT3_PAGER_VIRT2_START
default CONT3_PAGER_TASK_END	from CONT3_PAGER_VIRT2_END
default CONT3_PAGER_UTCB_START	from CONT3_PAGER_VIRT3_START
default CONT3_PAGER_UTCB_END	from CONT3_PAGER_VIRT3_END
default CONT3_LINUX_ZRELADDR	from (CONT3_LINUX_PHYS_OFFSET + 0x8000)
default CONT3_LINUX_PAGE_OFFSET 	from CONT3_PAGER_VIRT0_START
default CONT3_LINUX_PHYS_OFFSET 	from CONT3_PAGER_PHYS0_START
default CONT3_LINUX_ROOTFS_ADDRESS	from (CONT3_LINUX_PHYS_OFFSET + 0x500000)

default CONT3_PAGER_VIRTMEM_REGIONS from (CONT3_TYPE_POSIX==y ? 4 : 1)
default CONT3_PAGER_PHYSMEM_REGIONS from 1

# Define limits on virtual and physical memory regions of a _single_ container 0. Too much code!
when CONT3_PAGER_VIRTMEM_REGIONS < 2 suppress CONT3_PAGER_VIRT1_START CONT3_PAGER_VIRT1_END
when CONT3_PAGER_VIRTMEM_REGIONS < 2 suppress CONT3_PAGER_VIRT2_START CONT3_PAGER_VIRT2_END
when CONT3_PAGER_VIRTMEM_REGIONS < 2 suppress CONT3_PAGER_VIRT3_START CONT3_PAGER_VIRT3_END
when CONT3_PAGER_VIRTMEM_REGIONS < 2 suppress CONT3_PAGER_VIRT4_START CONT3_PAGER_VIRT4_END
when CONT3_PAGER_VIRTMEM_REGIONS < 2 suppress CONT3_PAGER_VIRT5_START CONT3_PAGER_VIRT5_END

when CONT3_PAGER_VIRTMEM_REGIONS < 3 suppress CONT3_PAGER_VIRT2_START CONT3_PAGER_VIRT2_END
when CONT3_PAGER_VIRTMEM_REGIONS < 3 suppress CONT3_PAGER_VIRT3_START CONT3_PAGER_VIRT3_END
when CONT3_PAGER_VIRTMEM_REGIONS < 3 suppress CONT3_PAGER_VIRT4_START CONT3_PAGER_VIRT4_END
when CONT3_PAGER_VIRTMEM_REGIONS < 3 suppress CONT3_PAGER_VIRT5_START CONT3_PAGER_VIRT5_END

when CONT3_PAGER_VIRTMEM_REGIONS < 4 suppress CONT3_PAGER_VIRT3_START CONT3_PAGER_VIRT3_END
when CONT3_PAGER_VIRTMEM_REGIONS < 4 suppress CONT3_PAGER_VIRT4_START CONT3_PAGER_VIRT4_END
when CONT3_PAGER_VIRTMEM_REGIONS < 4 suppress CONT3_PAGER_VIRT5_START CONT3_PAGER_VIRT5_END

when CONT3_PAGER_VIRTMEM_REGIONS < 5 suppress CONT3_PAGER_VIRT4_START CONT3_PAGER_VIRT4_END
when CONT3_PAGER_VIRTMEM_REGIONS < 5 suppress CONT3_PAGER_VIRT5_START CONT3_PAGER_VIRT5_END

when CONT3_PAGER_VIRTMEM_REGIONS < 6 suppress CONT3_PAGER_VIRT5_START CONT3_PAGER_VIRT5_END


when CONT3_PAGER_PHYSMEM_REGIONS < 2 suppress CONT3_PAGER_PHYS1_START CONT3_PAGER_PHYS1_END
when CONT3_PAGER_PHYSMEM_REGIONS < 2 suppress CONT3_PAGER_PHYS2_START CONT3_PAGER_PHYS2_END
when CONT3_PAGER_PHYSMEM_REGIONS < 2 suppress CONT3_PAGER_PHYS3_START CONT3_PAGER_PHYS3_END

when CONT3_PAGER_PHYSMEM_REGIONS < 3 suppress CONT3_PAGER_PHYS2_START CONT3_PAGER_PHYS2_END
when CONT3_PAGER_PHYSMEM_REGIONS < 3 suppress CONT3_PAGER_PHYS3_START CONT3_PAGER_PHYS3_END

when CONT3_PAGER_PHYSMEM_REGIONS < 4 suppress CONT3_PAGER_PHYS3_START CONT3_PAGER_PHYS3_END

# We assume kernel uses 0x0 - 0x40000 physical RAM.
# Physical Regions for containers should start after kernel.
require CONT3_PAGER_PHYS0_START >= 0x40000
require CONT3_PAGER_PHYS1_START >= 0x40000
require CONT3_PAGER_PHYS2_START >= 0x40000
require CONT3_PAGER_PHYS3_START >= 0x40000

# TODO: We can add check for end address of physical region to be
# less than RAM SIZE, need to find out RAM SIZE?

# Rules for Linux kernel parameters
require CONT3_LINUX_ZRELADDR > CONT3_LINUX_PHYS_OFFSET + 0x8000

# TODO: Do we want to check if PAGER_LMA/VMA lies in allocated memory regions
default CONT3_PAGER_PHYS0_START from ((3 == 0 ? 0x100000 : (0x100000 + 3 * 0x1000000)) + RAM_BASE_PLAT)
default	CONT3_PAGER_PHYS0_END	from (CONT3_PAGER_PHYS0_START + 0xD00000)
default CONT3_PAGER_PHYS1_START	from CONT3_PAGER_PHYS0_END
default CONT3_PAGER_PHYS1_END	from (CONT3_PAGER_PHYS1_START + 0x100000)
default CONT3_PAGER_PHYS2_START	from CONT3_PAGER_PHYS1_END
default CONT3_PAGER_PHYS2_END	from (CONT3_PAGER_PHYS2_START + 0x100000)
default CONT3_PAGER_PHYS3_START	from CONT3_PAGER_PHYS2_END
default CONT3_PAGER_PHYS3_END	from (CONT3_PAGER_PHYS3_START + 0x100000)

default CONT3_PAGER_VIRT0_START	from (3 == 0 ? 0xa0000000 : (0xa0000000 + 3 * 0x10000000))
default CONT3_PAGER_VIRT0_END	from (CONT3_PAGER_VIRT0_START + 0x10000000)
default CONT3_PAGER_VIRT1_START	from (3 == 0 ? 0x80000000 : (0x80000000 + 3 * 0x8000000))
default CONT3_PAGER_VIRT1_END	from (CONT3_PAGER_VIRT1_START + 0x8000000)
default CONT3_PAGER_VIRT2_START	from (3 == 0 ? 0x40000000 : (0x40000000 + 3 * 0x10000000))
default CONT3_PAGER_VIRT2_END	from (CONT3_PAGER_VIRT2_START + 0x10000000)
default CONT3_PAGER_VIRT3_START	from (3 == 0 ? 0xf8100000 : (0xf8100000 + 3 * 0x100000))
default CONT3_PAGER_VIRT3_END	from (CONT3_PAGER_VIRT3_START + 0x100000)
default CONT3_PAGER_VIRT4_START	from (3 == 0 ? 0x10000000 : (0x10000000 + 3 * 0x10000000))
default CONT3_PAGER_VIRT4_END	from (CONT3_PAGER_VIRT4_START + 0x10000000)
default CONT3_PAGER_VIRT5_START	from 0xe0000000
default CONT3_PAGER_VIRT5_END	from 0xf0000000

default CONT3_OPT_NAME from
(CONT3_TYPE_LINUX==y) ? "linux3" :
((CONT3_TYPE_POSIX==y) ? "posix3" :
((CONT3_BAREMETAL_PROJ_HELLO_WORLD==y) ? "hello_world3" :
((CONT3_BAREMETAL_PROJ_THREADS_DEMO==y) ? "thread_demo3" :
((CONT3_BAREMETAL_PROJ_TEST_SUITE==y) ? "test_suite3" :
((CONT3_BAREMETAL_PROJ_UART_SERVICE==y) ? "uart_service3" :
((CONT3_BAREMETAL_PROJ_KMI_SERVICE==y) ? "kmi_service3" :
((CONT3_BAREMETAL_PROJ_MUTEX_DEMO==y) ? "mutex_demo3" :
((CONT3_BAREMETAL_PROJ_IPC_DEMO==y) ? "ipc_demo3" :
((CONT3_BAREMETAL_PROJ_TIMER_SERVICE==y) ? "timer_service3" : "empty3")))))))))

when CONT3_TYPE_LINUX==y suppress cont3_pager_linker_params
unless CONT3_TYPE_POSIX==y suppress cont3_posix_pager_params
unless CONT3_TYPE_LINUX==y suppress cont3_linux_pager_params
unless CONT3_TYPE_BAREMETAL==y suppress cont3_baremetal_params

# derive symbols, for cinfo.c, depending on the type of container selected
derive CONT3_PAGER_LOAD_ADDR from (CONT3_TYPE_LINUX==y) ? CONT3_LINUX_PHYS_OFFSET : CONT3_PAGER_LMA
derive CONT3_PAGER_VIRT_ADDR from (CONT3_TYPE_LINUX==y) ? CONT3_LINUX_PAGE_OFFSET : CONT3_PAGER_VMA
derive CONT3_START_PC_ADDR from (CONT3_TYPE_LINUX != y) ? CONT3_PAGER_VMA : (CONT3_LINUX_PAGE_OFFSET + CONT3_LINUX_ZRELADDR - CONT3_LINUX_PHYS_OFFSET)

symbols
cont3_menu		'Container 3 Parameters'					text
List of parameters associated with container3.

All parameters are provided with default values, appropriate for defualt configurations of
various containers.
.

cont3_physmem_list	'Container 3 Pager Physical Memory Regions (Capabilities)'	text
List of physical memory regions to be used by container3.
.

cont3_virtmem_list	'Container 3 Pager Virtual Memory Regions (Capabilities)'	text
List of virtual memory regions to be used by container3.
.

container3_type	'Container 3 Type'						text
Container type.
.

#cont3_pager_params	'Container 3 Pager Parameters'			text
#Configuration parameters associated with container3 pager.
#.

container3_options	'Container 3 Options'					text
Configuration parameters associated with container3.
.

cont3_linux_pager_params	'Container 3 Linux Pager Parameters'		text
Configuration parameters associated with pager of container3.
.

cont3_pager_linker_params	'Container 3 Pager Linker Parameters'		text
Pager's linker parameters. These allow shifting the pager image in physical and virtual
address spaces.

For correct functioning, the LMA parameter should match with one of the
defined physical memory capabilities.

The VMA parameter should match with one of the defined virtual memory
capabilities.
.

cont3_posix_pager_params	'Container 3 POSIX Pager Parameters'		text
Configuration parameters associated with pager of container3.
.

cont3_baremetal_params		'Baremetal Project Type'			text
Select the type of sources to include in this baremetal container
.

CONT3_BAREMETAL_PROJ_EMPTY		'Empty Project'					text
Empty container.

This includes the bare minimum sources required to build a container.
.

CONT3_BAREMETAL_PROJ_HELLO_WORLD	'Hello World'					text
Hello world container

This includes a main.c with a hello world message printed on the console.
.

CONT3_BAREMETAL_PROJ_THREADS_DEMO	'Thread Library Demo'				text
Baremetal container demonstrating usage of libl4 thread library and associated API.
.

CONT3_BAREMETAL_PROJ_TEST_SUITE   	'Microkernel Tests'				text
Baremetal container demonstrating some API usage cases and tests.
.

CONT3_BAREMETAL_PROJ_UART_SERVICE	'UART Service'					text
Baremetal container demonstrating usage of uart devices.
.

CONT3_BAREMETAL_PROJ_TIMER_SERVICE 'Timer Service'					text
Baremetal container displaying usage of timer devices.
.

CONT3_BAREMETAL_PROJ_KMI_SERVICE 	'Keyboard Mouse Service'			text
Baremetal container displaying usage of mouse and keyboard devices.
.

CONT3_BAREMETAL_PROJ_MUTEX_DEMO	'Mutex Demo'					text
Baremetal container displaying usage of mutexes.
.

CONT3_BAREMETAL_PROJ_IPC_DEMO	'IPC Demo'					text
Baremetal container displaying usage of ipc calls.
.


choices cont3_baremetal_params
	CONT3_BAREMETAL_PROJ_EMPTY
	CONT3_BAREMETAL_PROJ_HELLO_WORLD
	CONT3_BAREMETAL_PROJ_THREADS_DEMO
	CONT3_BAREMETAL_PROJ_TEST_SUITE
	CONT3_BAREMETAL_PROJ_UART_SERVICE
	CONT3_BAREMETAL_PROJ_TIMER_SERVICE
	CONT3_BAREMETAL_PROJ_KMI_SERVICE
	CONT3_BAREMETAL_PROJ_MUTEX_DEMO
	CONT3_BAREMETAL_PROJ_IPC_DEMO
	default CONT3_BAREMETAL_PROJ_EMPTY

menu cont3_pager_linker_params
	CONT3_PAGER_LMA@
	CONT3_PAGER_VMA@

menu cont3_posix_pager_params
	CONT3_PAGER_SHM_START@
	CONT3_PAGER_SHM_END@
	CONT3_PAGER_TASK_START@
	CONT3_PAGER_TASK_END@
	CONT3_PAGER_UTCB_START@
	CONT3_PAGER_UTCB_END@

menu cont3_linux_pager_params
	CONT3_LINUX_PHYS_OFFSET@
	CONT3_LINUX_ZRELADDR@
	CONT3_LINUX_ROOTFS_ADDRESS@
	CONT3_LINUX_PAGE_OFFSET@

menu cont3_virtmem_list
	CONT3_PAGER_VIRTMEM_REGIONS%
	CONT3_PAGER_VIRT0_START@
	CONT3_PAGER_VIRT0_END@
	CONT3_PAGER_VIRT1_START@
	CONT3_PAGER_VIRT1_END@
	CONT3_PAGER_VIRT2_START@
	CONT3_PAGER_VIRT2_END@
	CONT3_PAGER_VIRT3_START@
	CONT3_PAGER_VIRT3_END@
	CONT3_PAGER_VIRT4_START@
	CONT3_PAGER_VIRT4_END@
	CONT3_PAGER_VIRT5_START@
	CONT3_PAGER_VIRT5_END@

menu cont3_physmem_list
	CONT3_PAGER_PHYSMEM_REGIONS%
	CONT3_PAGER_PHYS0_START@
	CONT3_PAGER_PHYS0_END@
	CONT3_PAGER_PHYS1_START@
	CONT3_PAGER_PHYS1_END@
	CONT3_PAGER_PHYS2_START@
	CONT3_PAGER_PHYS2_END@
	CONT3_PAGER_PHYS3_START@
	CONT3_PAGER_PHYS3_END@

#
# Settings for Custom Capabilities
#
choices cont3_pager_cap_custom0_type
	CONT3_PAGER_CAP_CUSTOM0_IPC_TYPE
	default CONT3_PAGER_CAP_CUSTOM0_IPC_TYPE
choices cont3_pager_cap_custom1_type
	CONT3_PAGER_CAP_CUSTOM1_IPC_TYPE
	default CONT3_PAGER_CAP_CUSTOM1_IPC_TYPE
choices cont3_pager_cap_custom2_type
	CONT3_PAGER_CAP_CUSTOM2_IPC_TYPE
	default CONT3_PAGER_CAP_CUSTOM2_IPC_TYPE
choices cont3_pager_cap_custom3_type
	CONT3_PAGER_CAP_CUSTOM3_IPC_TYPE
	default CONT3_PAGER_CAP_CUSTOM3_IPC_TYPE

default CONT3_PAGER_CAP_CUSTOM0_USE	from n
default CONT3_PAGER_CAP_CUSTOM1_USE	from n
default CONT3_PAGER_CAP_CUSTOM2_USE	from n
default CONT3_PAGER_CAP_CUSTOM3_USE	from n

menu cont3_pager_cap_custom0
	CONT3_PAGER_CAP_CUSTOM0_USE
	cont3_pager_cap_custom0_type
	CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	CONT3_PAGER_CAP_CUSTOM0_TARGET%

menu cont3_pager_cap_custom1
	CONT3_PAGER_CAP_CUSTOM1_USE
	cont3_pager_cap_custom1_type
	CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	CONT3_PAGER_CAP_CUSTOM1_TARGET%

menu cont3_pager_cap_custom2
	CONT3_PAGER_CAP_CUSTOM2_USE
	cont3_pager_cap_custom2_type
	CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	CONT3_PAGER_CAP_CUSTOM2_TARGET%

menu cont3_pager_cap_custom3
	CONT3_PAGER_CAP_CUSTOM3_USE
	cont3_pager_cap_custom3_type
	CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	CONT3_PAGER_CAP_CUSTOM3_TARGET%

choicegroup CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
	    CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
	    default CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER from y

choicegroup CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
	    CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
	    default CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER from y

choicegroup CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
	    CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
	    default CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER from y

choicegroup CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
	    CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
	    CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
	    default CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER from y

when CONT3_PAGER_CAP_CUSTOM0_USE == n
	suppress cont3_pager_cap_custom0_type
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET

when CONT3_PAGER_CAP_CUSTOM1_USE == n
	suppress cont3_pager_cap_custom1_type
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET

when CONT3_PAGER_CAP_CUSTOM2_USE == n
	suppress cont3_pager_cap_custom2_type
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET

when CONT3_PAGER_CAP_CUSTOM3_USE == n
	suppress cont3_pager_cap_custom3_type
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET

when CONT3_PAGER_CAP_CUSTOM0_IPC_TYPE == n
	suppress CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM0_TARGET

when CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER or
     CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_PAGER_CAP_CUSTOM0_TARGET

when CONT3_PAGER_CAP_CUSTOM1_IPC_TYPE == n
	suppress CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM1_TARGET

when CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER or
     CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_PAGER_CAP_CUSTOM1_TARGET

when CONT3_PAGER_CAP_CUSTOM2_IPC_TYPE == n
	suppress CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM2_TARGET

when CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER or
     CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_PAGER_CAP_CUSTOM2_TARGET

when CONT3_PAGER_CAP_CUSTOM3_IPC_TYPE == n
	suppress CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER
		 CONT3_PAGER_CAP_CUSTOM3_TARGET

when CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER or
     CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_PAGER_CAP_CUSTOM3_TARGET

default CONT3_PAGER_CAP_CUSTOM0_TARGET		from 0
default CONT3_PAGER_CAP_CUSTOM1_TARGET		from 0
default CONT3_PAGER_CAP_CUSTOM2_TARGET		from 0
default CONT3_PAGER_CAP_CUSTOM3_TARGET		from 0

# Symbols for Custom Capabilities
symbols

#
# CUSTOM CAPABILITY 0
#
CONT3_PAGER_CAP_CUSTOM0_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont3_pager_cap_custom0_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT3_PAGER_CAP_CUSTOM0_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT3_PAGER_CAP_CUSTOM0_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT3_PAGER_CAP_CUSTOM0_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT3_PAGER_CAP_CUSTOM0_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 1
#
CONT3_PAGER_CAP_CUSTOM1_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont3_pager_cap_custom1_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT3_PAGER_CAP_CUSTOM1_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT3_PAGER_CAP_CUSTOM1_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT3_PAGER_CAP_CUSTOM1_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT3_PAGER_CAP_CUSTOM1_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.


#
# CUSTOM CAPABILITY 2
#
CONT3_PAGER_CAP_CUSTOM2_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont3_pager_cap_custom2_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT3_PAGER_CAP_CUSTOM2_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT3_PAGER_CAP_CUSTOM2_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT3_PAGER_CAP_CUSTOM2_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT3_PAGER_CAP_CUSTOM2_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

#
# CUSTOM CAPABILITY 3
#
CONT3_PAGER_CAP_CUSTOM3_USE			'Enable this Capability'			text
Enable/Disable this capability.
.

cont3_pager_cap_custom3_type			'Capability Operation Type'			text
Specify the type of custom capability.
.

CONT3_PAGER_CAP_CUSTOM3_IPC_TYPE			'IPC Capability'				text
Capability associated with inter-container and intra-container ipc properties.
.

CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT3_PAGER_CAP_CUSTOM3_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT3_PAGER_CAP_CUSTOM3_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT3_PAGER_CAP_CUSTOM3_TARGET			'Enter Container ID'				text
Container ID of the container/pager targeted by this capability.
.

# Symbols for Generic Capabilities
symbols
CONT3_PAGER_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER 		'Capability Targets Current Container'		text
Capability targets current container, including all spaces and threads present inside this container.
.

CONT3_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 		'Capability Targets Current Pager`s Space'	text
Capability targets space associated with pager of this container.
.

CONT3_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER		'Capability Targets Another Container'		text
Capability targets pager of another container.
.

CONT3_PAGER_CAP_IPC_TARGET_OTHER_PAGER			'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container.
.

CONT3_PAGER_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

CONT3_PAGER_CAP_IRQCTRL_USE				'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER	'Capability targets any thread in this Container'		text
Capability targets current container, meaning that the system call associated with this
capability can be used against any address space and thread present inside this container.
.

CONT3_CAP_IPC_TARGET_CURRENT_PAGER_SPACE 'Capability targets any thread in pager`s address space'	text
Capability targets the pager's address space, meaning that the system call associated
with this capability can be used for any thread inside the address space of pager.
.

CONT3_CAP_IPC_TARGET_OTHER_CONTAINER	'Capability Targets Another Container'		text
Capability targets another container. This option may be used to allow system calls to work for
entities that exist in other container's. For example an IPC capability with this option would
allow ipc system calls to threads that reside in another container.
.

CONT3_CAP_IPC_TARGET_OTHER_PAGER	'Capability Targets Another Container`s Pager'	text
Capability targets pager of another container. This option may be used to allow system calls to work for
the pager of other containers. For example an IPC capability with this option would
allow ipc system calls to go through to the pager of another container. This is a more
constrained version of targeting another container.

.

CONT3_CAP_IPC_USE					'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_CAP_IPC_TARGET				'Enter Container ID'				text
Container ID of the container/pager targeted by this capabilty.
.

symbols
CONT3_PAGER_CAP_THREADPOOL_SIZE	'Number of Threads'				text
Total number of threads in this pool.
.

CONT3_PAGER_CAP_SPACEPOOL_SIZE	'Number of Address Spaces'			text
Total number of spaces in this pool.
.

CONT3_PAGER_CAP_MAPPOOL_SIZE	'Number of PMD Mappings'			text
Total number of pmds(E.g. Middle-level Page Tables) in this pool.
.

CONT3_PAGER_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT3_CAP_MUTEXPOOL_SIZE	'Number of Userspace Mutexes'			text
Total number of mutexes in this pool.
.

CONT3_PAGER_CAP_THREADPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_PAGER_CAP_SPACEPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_PAGER_CAP_MAPPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_PAGER_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

CONT3_CAP_MUTEXPOOL_USE	'Enable this Capability'			text
Enable/Disable this capability.
.

cont3_pager_cap_threadpool	'Container 3 Thread Pool Capability'		text
It controls the number of threads allowed to be created in the container.
.

cont3_pager_cap_spacepool	'Container 3 Space Pool Capability'		text
It controls the number of spaces allowed to be created in the container.
.

cont3_pager_cap_mutexpool	'Container 3 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont3_cap_mutexpool	'Container 3 Mutex Pool Capability'		text
It controls the number of mutex allowed to be created and used in the container.
.

cont3_pager_cap_mappool		'Container 3 Map Pool Capability'			text
It defines the mapping pools/caches for various kinds of structures used in the container.
.


cont3_pager_cap_ipc		'Container 3 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont3_cap_ipc		'Container 3 IPC Capability'			text
Capability associated with inter-container and intra-container ipc permissions.
.

cont3_pager_cap_irqctrl		'Container 3 IRQ Control Capability'		text
Capability associated with irq control features and permissions.
.

cont3_pager_cap_custom0 		'Container 3 Custom Capability 0 Parameters'	text
Custom capability.
.

cont3_pager_cap_custom1 		'Container 3 Custom Capability 1 Parameters'	text
Custom capability.
.

cont3_pager_cap_custom2 		'Container 3 Custom Capability 2 Parameters'	text
Custom capability.
.

cont3_pager_cap_custom3		'Container 3 Custom Capability 3 Parameters'	text
Custom capability.
.

cont3_pager_capability_list	'Container 3 Pager Capabilities'			text
List of capabilities associated with Container3's Pager task
.

cont3_capability_list	'Container 3 Global Capabilities'		text
List of capabilities globally associated with all tasks inside Container3.

These capabilities can be used by tasks inside Container3.
.


default CONT3_PAGER_CAP_THREADPOOL_SIZE	from 64
default CONT3_PAGER_CAP_SPACEPOOL_SIZE	from 64
default CONT3_PAGER_CAP_MAPPOOL_SIZE	from 800
default CONT3_PAGER_CAP_MUTEXPOOL_SIZE	from 100
default CONT3_CAP_MUTEXPOOL_SIZE	from 100

default CONT3_PAGER_CAP_THREADPOOL_USE	from y
default CONT3_PAGER_CAP_SPACEPOOL_USE	from y
default CONT3_PAGER_CAP_MAPPOOL_USE	from y
default CONT3_PAGER_CAP_MUTEXPOOL_USE	from y
default CONT3_CAP_MUTEXPOOL_USE	from y

# Use Rules for Generic Capabilities
when CONT3_PAGER_CAP_THREADPOOL_USE == n
	suppress CONT3_PAGER_CAP_THREADPOOL_SIZE
when CONT3_PAGER_CAP_SPACEPOOL_USE == n
	suppress CONT3_PAGER_CAP_SPACEPOOL_SIZE
when CONT3_PAGER_CAP_MAPPOOL_USE == n
	suppress CONT3_PAGER_CAP_MAPPOOL_SIZE
when CONT3_PAGER_CAP_MUTEXPOOL_USE == n
	suppress CONT3_PAGER_CAP_MUTEXPOOL_SIZE

when CONT3_CAP_MUTEXPOOL_USE == n
	suppress CONT3_CAP_MUTEXPOOL_SIZE

when CONT3_PAGER_CAP_IPC_USE == n
	suppress CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT3_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT3_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT3_PAGER_CAP_IPC_TARGET_OTHER_PAGER

when CONT3_CAP_IPC_USE == n
	suppress CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER
		 CONT3_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
		 CONT3_CAP_IPC_TARGET_OTHER_CONTAINER
		 CONT3_CAP_IPC_TARGET_OTHER_PAGER

when CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT3_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_PAGER_CAP_IPC_TARGET

when CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER or
     CONT3_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
     	suppress CONT3_CAP_IPC_TARGET

choicegroup CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT3_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT3_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT3_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER from y

choicegroup CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER
	    CONT3_CAP_IPC_TARGET_OTHER_CONTAINER
	    CONT3_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	    CONT3_CAP_IPC_TARGET_OTHER_PAGER
	    default CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER from y

default CONT3_PAGER_CAP_IPC_USE		from y
default CONT3_PAGER_CAP_IRQCTRL_USE	from y
default CONT3_CAP_IPC_USE			from y

default CONT3_PAGER_CAP_IPC_TARGET	from 0
default CONT3_CAP_IPC_TARGET	from 0

# Capability Menus
menu cont3_pager_cap_irqctrl
	CONT3_PAGER_CAP_IRQCTRL_USE

menu cont3_pager_cap_ipc
	CONT3_PAGER_CAP_IPC_USE
	CONT3_PAGER_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT3_PAGER_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT3_PAGER_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT3_PAGER_CAP_IPC_TARGET_OTHER_PAGER
	CONT3_PAGER_CAP_IPC_TARGET%

menu cont3_pager_cap_threadpool
	CONT3_PAGER_CAP_THREADPOOL_USE
	CONT3_PAGER_CAP_THREADPOOL_SIZE%

menu cont3_pager_cap_spacepool
	CONT3_PAGER_CAP_SPACEPOOL_USE
	CONT3_PAGER_CAP_SPACEPOOL_SIZE%

menu cont3_pager_cap_mappool
	CONT3_PAGER_CAP_MAPPOOL_USE
	CONT3_PAGER_CAP_MAPPOOL_SIZE%

menu cont3_pager_cap_mutexpool
	CONT3_PAGER_CAP_MUTEXPOOL_USE
	CONT3_PAGER_CAP_MUTEXPOOL_SIZE%

menu cont3_pager_capability_list
	cont3_pager_cap_threadpool
	cont3_pager_cap_spacepool
	cont3_pager_cap_mutexpool
	cont3_pager_cap_mappool
	cont3_pager_cap_ipc
	cont3_pager_cap_irqctrl
	cont3_pager_cap_custom0
	cont3_pager_cap_custom1
	cont3_pager_cap_custom2
	cont3_pager_cap_custom3

menu cont3_cap_ipc
	CONT3_CAP_IPC_USE
	CONT3_CAP_IPC_TARGET_CURRENT_CONTAINER
	CONT3_CAP_IPC_TARGET_CURRENT_PAGER_SPACE
	CONT3_CAP_IPC_TARGET_OTHER_CONTAINER
	CONT3_CAP_IPC_TARGET_OTHER_PAGER
	CONT3_CAP_IPC_TARGET%

menu cont3_cap_mutexpool
	CONT3_CAP_MUTEXPOOL_USE
	CONT3_CAP_MUTEXPOOL_SIZE%

menu cont3_capability_list
	cont3_cap_ipc
	cont3_cap_mutexpool

# menu cont3_pager_params

menu container3_options
	CONT3_OPT_NAME$
	cont3_baremetal_params
#	cont3_pager_params
	cont3_linux_pager_params
	cont3_pager_linker_params
	cont3_posix_pager_params
	cont3_physmem_list
	cont3_virtmem_list
	cont3_pager_capability_list
	cont3_capability_list

choices container3_type
	CONT3_TYPE_BAREMETAL
	CONT3_TYPE_POSIX
	CONT3_TYPE_LINUX
        default CONT3_TYPE_BAREMETAL

menu cont3_menu
	container3_type
	container3_options
