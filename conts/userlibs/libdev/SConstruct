# -*- mode: python; coding: utf-8; -*-
#
#  Codezero -- a microkernel for embedded systems.
#
#  Copyright Â© 2009  B Labs Ltd
#
import os, sys

PROJRELROOT = '../../..'
sys.path.append(PROJRELROOT)

from scripts.config.projpaths import *
from scripts.config.configuration import *

config = configuration_retrieve()
gcc_arch_flag = config.gcc_arch_flag

# We assume we are compiling for userspace.
# variant can be specified from cmdline using
# scons variant=xxx
variant = ARGUMENTS.get('variant', 'userspace')
print '\nCompiling for variant: ' + variant + '\n'

builddir = join(join(BUILDDIR, LIBDEV_RELDIR), 'sys-' + variant)
VariantDir(builddir, os.getcwd())

env = Environment(CC = config.toolchain_userspace + 'gcc',
		          CCFLAGS = ['-g', '-nostdlib', '-ffreestanding', '-std=gnu99',
                             '-nostdinc', '-Wall', '-DVARIANT_' + variant.upper(),
                             '-march=' + gcc_arch_flag, '-Werror'],
		          LINKFLAGS = ['-nostdlib'],
		          ASFLAGS = ['-D__ASSEMBLY__'],
		          ENV = {'PATH' : os.environ['PATH']},
		          CPPPATH = ['#include', LIBC_INCLUDE, LIBL4_INCLUDE, KERNEL_HEADERS])


objects     = SConscript('uart/pl011/SConscript', duplicate=0,
                         exports = { 'env' : env },
                         variant_dir = join(builddir, 'uart/pl011'))
objects     += SConscript('timer/sp804/SConscript', duplicate=0,
                          exports = { 'env' : env },
                          variant_dir = join(builddir, 'timer/sp804'))
objects     += SConscript('kmi/pl050/SConscript', duplicate=0,
                          exports = { 'env' : env },
                          variant_dir = join(builddir, 'kmi/pl050'))
objects     += SConscript('clcd/pl110/SConscript', duplicate=0,
                          exports = { 'env' : env },
                          variant_dir = join(builddir, 'clcd/pl110'))
objects     += SConscript('uart/omap/SConscript', duplicate=0,
                          exports = { 'env' : env },
                          variant_dir = join(builddir, 'uart/omap'))
objects     += SConscript('timer/omap/SConscript', duplicate=0,
                          exports = { 'env' : env },
                          variant_dir = join(builddir, 'timer/omap'))

library = env.StaticLibrary(join(builddir, 'libdev-' + variant), objects)
